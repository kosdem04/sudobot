from tkinter.ttk import Label

from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, LabeledPrice, PreCheckoutQuery
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from pyexpat.errors import messages
from sqlalchemy.util import await_only

from config import ADMIN_DEVELOPER_CHAT_ID
import app.database.requests as db
import app.states as st
import app.keyboards as kb

developer = Router()

@developer.callback_query(F.data == 'developer', st.Register.role)
async def developer_moderation(callback: CallbackQuery, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        if await db.is_moderation_developer(callback.from_user.id):
            await callback.answer('')
            await callback.message.answer('–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏')
        else:
            # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.set_state(st.Register.moderation)
            await callback.answer('')
            await callback.message.answer('‚ÄºÔ∏è –í–ù–ò–ú–ê–ù–ò–ï ‚ÄºÔ∏è\n\n'
                                          '–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Å—Ç–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –Ω–∞ –Ω–∞—à–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ, <b>–í–ê–ú –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:</b>\n\n'
                                          '<b>1.</b> –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ –∏–º–µ–µ—Ç "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"\n\n'
                                          '<b>2.</b> –í –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ <b>–í–∞—à –≥–∏—Ç—Ö–∞–± (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ</b>)\n\n'
                                          '<b>3.</b> –û–∂–∏–¥–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏', reply_markup=kb.back)
    except Exception:
        await callback.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


@developer.message(F.text == 'üßë‚Äçüíª –°—Ç–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º', st.ClientMenu.menu)
async def become_developer(message: Message, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        if await db.is_developer(message.from_user.id):
            await state.clear()
            # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.set_state(st.DeveloperMenu.menu)
            await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=kb.developer_main)
        elif await db.is_moderation_developer(message.from_user.id):
            await message.answer('–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏')
        else:
            await db.add_client(message.from_user.id)
            # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.set_state(st.Register.moderation)
            await message.answer('‚ÄºÔ∏è –í–ù–ò–ú–ê–ù–ò–ï ‚ÄºÔ∏è\n\n'
                                 '–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Å—Ç–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –Ω–∞ –Ω–∞—à–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ, <b>–í–ê–ú –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:</b>\n\n'
                                 '<b>1.</b> –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ –∏–º–µ–µ—Ç "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"\n\n'
                                 '<b>2.</b> –í –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ <b>–í–∞—à –≥–∏—Ç—Ö–∞–± (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ</b>)\n\n'
                                 '<b>3.</b> –û–∂–∏–¥–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏', reply_markup=kb.back)
    except Exception:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


@developer.message(st.Register.moderation)
async def developer_moderation_github(message: Message, bot: Bot, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        # –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤ –ë–î
        await db.add_developer(message.from_user.id, message.from_user.username)
        await bot.send_message(chat_id=ADMIN_DEVELOPER_CHAT_ID,
                               text=f'‚ÄºÔ∏è –í–ù–ò–ú–ê–ù–ò–ï ‚ÄºÔ∏è\n'
                                    f'<b>–ù–æ–≤—ã–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:</b>\n\n'
                                    f'<b>–ù–∏–∫–Ω–µ–π–º:</b> {message.from_user.username}\n'
                                    f'<b>GitHub:</b> {message.text}',
                               reply_markup=await kb.developer_moderation(message.from_user.id))
        # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        await message.answer('‚ÄºÔ∏è –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é')
    except Exception:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


@developer.message(F.text == '‚óÄÔ∏è –ù–∞–∑–∞–¥', st.CompletedOrder.order_info)
@developer.message(F.text == '‚óÄÔ∏è –ù–∞–∑–∞–¥', st.CompletedOrder.list)
@developer.message(F.text == '‚óÄÔ∏è –ù–∞–∑–∞–¥', st.DeveloperResponse.delete_response)
@developer.message(F.text == '‚óÄÔ∏è –ù–∞–∑–∞–¥', st.DeveloperResponse.list)
@developer.message(F.text == '‚óÄÔ∏è –ù–∞–∑–∞–¥', st.Market.list)
@developer.message(F.text == '‚óÄÔ∏è –ù–∞–∑–∞–¥', st.DeveloperProfile.profile)
async def developer_main_menu(message: Message, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        await state.clear()
        # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(st.DeveloperMenu.menu)
        await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=kb.developer_main)
    except Exception:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


"""

–î–µ–π—Å—Ç–≤–∏—è –≤ —Ä–∞–∑–¥–µ–ª–µ "–ë–∏—Ä–∂–∞"
----------------------------------------------------------------------------------------------
"""
@developer.message(F.text == '‚ùå –û—Ç–º–µ–Ω–∞', st.Market.make_response)
@developer.message(F.text == 'üí∞ –ë–∏—Ä–∂–∞', st.DeveloperMenu.menu)
async def market_list(message: Message, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        if await db.is_available_response(message.from_user.id) > 0:
            await message.answer('üí≤ –ó–∞–∫–∞–∑—ã üí≤')
            orders = await db.all_orders()
            total_pages = (len(orders) + 10 - 1) // 10  # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
            # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.set_state(st.Market.total_pages)
            await state.update_data(total_pages=total_pages)
            # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.set_state(st.Market.list)
            orders = await db.all_orders_pagination(1)
            await message.answer(f'<b>–°—Ç—Ä–∞–Ω–∏—Ü–∞ 1 –∏–∑ {total_pages}</b>',
                                     reply_markup=await kb.all_orders_pagination(orders, 1, total_pages))
            await message.answer('–ú–µ–Ω—é üëá',
                                 reply_markup=kb.back)
        else:
            await message.answer('‚ÄºÔ∏è –ò—Å—Ç—Ä–∞—á–µ–Ω –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ª–∏–º–∏—Ç –æ—Ç–∫–ª–∏–∫–æ–≤')
    except Exception:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


@developer.callback_query(F.data.startswith('next-market-order_'), st.Market.list)
async def next_market_order(callback: CallbackQuery, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        await callback.answer('')
        page = int(callback.data.split('_')[1])
        orders = await db.all_orders_pagination(page)
        tdata = await state.get_data()
        total_pages = tdata['total_pages']
        await callback.message.edit_text(f'<b>–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}</b>',
                             reply_markup=await kb.all_orders_pagination(orders, page, total_pages))
    except Exception:
        await callback.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


@developer.callback_query(F.data.startswith('prev-market-order_'), st.Market.list)
async def prev_market_order(callback: CallbackQuery, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        await callback.answer('')
        page = int(callback.data.split('_')[1])
        orders = await db.all_orders_pagination(page)
        tdata = await state.get_data()
        total_pages = tdata['total_pages']
        await callback.message.edit_text(f'<b>–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}</b>',
                             reply_markup=await kb.all_orders_pagination(orders, page, total_pages))
    except Exception:
        await callback.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


@developer.callback_query(F.data.startswith('order-info_'), st.Market.list)
async def market_order_info(callback: CallbackQuery, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        await callback.answer('')
        # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(st.Market.order_info)
        order = await db.get_order(callback.data.split('_')[1])
        if await db.developer_is_client(callback.from_user.id, order):
            await callback.message.answer(f'–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞\n\n'
                                          f'<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {order.title}\n'
                                          f'<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {order.description}\n'
                                          f'‚ÄºÔ∏è <b>–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è –Ω–∞ —Å–≤–æ–π –∑–∞–∫–∞–∑</b>',
                                          reply_markup=await kb.market_order_info())
        else:
            is_response = await db.is_response_from_developer_to_order(callback.from_user.id,
                                                                       callback.data.split('_')[1])
            await callback.message.answer(f'–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞\n\n'
                                          f'<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {order.title}\n'
                                          f'<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {order.description}'
                                          f'{f'\n\n‚ÄºÔ∏è <b>–í—ã —É–∂–µ –æ—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å –Ω–∞ —ç—Ç–æ—Ç –∑–∞–∫–∞–∑</b>' if is_response else ''}',
                                              reply_markup=await kb.market_order_info()
                                              if is_response else await kb.make_response(order.id))
    except Exception:
        await callback.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


@developer.callback_query(F.data == 'hide_market_order_info', st.Market.order_info)
async def hide_market_order_info(callback: CallbackQuery, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        await state.set_state(st.Market.list)
        await callback.answer('')
        await callback.message.delete()
    except Exception:
        await callback.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


@developer.callback_query(F.data.startswith('make-response_'), st.Market.order_info)
async def market_make_response(callback: CallbackQuery, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        await state.update_data(order_info=callback.data.split('_')[1])
        await state.set_state(st.Market.make_response)
        await callback.answer('')
        order = await db.get_order(callback.data.split('_')[1])
        await callback.message.answer(f'<b>–ó–∞–∫–∞–∑:</b> {order.title}\n'
                                      f'–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–∫–ª–∏–∫–∞ (–Ω–µ –±–æ–ª–µ–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤)',
                                      reply_markup=kb.cancel)
    except Exception:
        await callback.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


@developer.message(st.Market.make_response)
async def market_send_response(message: Message, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        if len(message.text) > 10000:
            await message.answer('–¢–µ–∫—Å—Ç –æ—Ç–∫–ª–∏–∫–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª–µ–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤')
        else:
            # –±–µ—Ä—ë–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
            tdata = await state.get_data()
            await db.add_response(message.from_user.id, tdata['order_info'], message.text)
            await message.answer('–í–∞—à –æ—Ç–∫–ª–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–∫–∞–∑—á–∏–∫—É.')
            if await db.is_available_response(message.from_user.id) > 0:
                await message.answer('üí≤ –ó–∞–∫–∞–∑—ã üí≤')
                orders = await db.all_orders()
                total_pages = (len(orders) + 10 - 1) // 10  # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
                # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                await state.set_state(st.Market.total_pages)
                await state.update_data(total_pages=total_pages)
                # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                await state.set_state(st.Market.list)
                orders = await db.all_orders_pagination(1)
                await message.answer(f'<b>–°—Ç—Ä–∞–Ω–∏—Ü–∞ 1 –∏–∑ {total_pages}</b>',
                                     reply_markup=await kb.all_orders_pagination(orders, 1, total_pages))
                await message.answer('–ú–µ–Ω—é üëá',
                                     reply_markup=kb.back)
            else:
                await state.clear()
                # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                await state.set_state(st.DeveloperMenu.menu)
                await message.answer('‚ÄºÔ∏è –ò—Å—Ç—Ä–∞—á–µ–Ω –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ª–∏–º–∏—Ç –æ—Ç–∫–ª–∏–∫–æ–≤')
    except Exception:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')



"""

–î–µ–π—Å—Ç–≤–∏—è –≤ —Ä–∞–∑–¥–µ–ª–µ "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"
----------------------------------------------------------------------------------------------
"""
@developer.message(F.text == '‚óÄÔ∏è –ù–∞–∑–∞–¥', st.DeveloperProfile.tariffs)
@developer.message(F.text == 'üßë‚Äçüíª –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', st.DeveloperMenu.menu)
async def developer_profile(message: Message, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(st.DeveloperProfile.profile)
        developer_info = await db.get_developer(message.from_user.id)
        tariff = await db.get_tariff(developer_info.tariff)
        await message.answer(f'<b>–Æ–∑–µ—Ä–Ω–µ–π–º:</b> {developer_info.username}\n'
                             f'<b>–¢–∞—Ä–∏—Ñ:</b> {tariff.name if tariff.name else '–ù–µ –≤—ã–±—Ä–∞–Ω'}\n'
                             f'<b>–†–µ–π—Ç–∏–Ω–≥:</b> {developer_info.rating if developer_info.rating > 0 else '–ù–µ—Ç –æ—Ü–µ–Ω–æ–∫'}\n'
                             f'<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤:</b> {developer_info.completed_orders}\n'
                             f'<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—Ç–∫–ª–∏–∫–æ–≤:</b> {developer_info.responses}\n',
                                 reply_markup= kb.developer_profile)
    except Exception:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


"""-------------------------------------------–í—ã–±–æ—Ä –∏ –ø–æ–∫—É–ø–∫–∞ —Ç–∞—Ä–∏—Ñ–∞---------------------------------------------------"""
@developer.message(F.text == 'ü§ñ –í—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ', st.DeveloperProfile.profile)
async def list_of_tariffs(message: Message, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(st.DeveloperProfile.tariffs)
        tariffs = await db.all_tariffs()
        for tariff in tariffs:
            await message.answer(f'<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {tariff.name}\n'
                                 f'<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {tariff.description}\n',
                                 reply_markup=await kb.select_tariff(tariff))
        await message.answer('–ú–µ–Ω—é üëá',
                             reply_markup=kb.back)
    except Exception:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


@developer.callback_query(F.data.startswith('tariff_'), st.DeveloperProfile.tariffs)
async def select_tariff(callback: CallbackQuery, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(st.DeveloperProfile.pay_tariff)
        await callback.answer('')
        tariff = await db.get_tariff(callback.data.split('_')[1])
        await callback.message.answer_invoice(title='–û–ø–ª–∞—Ç–∞ —Ç–∞—Ä–∏—Ñ–∞',
                                              description='–û–ø–ª–∞—Ç–∞ —Ç–∞—Ä–∏—Ñ–∞',
                                              payload=f'tariff_{tariff.id}',
                                              currency='XTR',
                                              prices=[LabeledPrice(label='XTR', amount=tariff.amount)])
    except Exception:
        await callback.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


@developer.pre_checkout_query()
async def pre_checkout_query(query: PreCheckoutQuery):
    await query.answer(True)


@developer.message(F.successful_payment.invoice_payload.startswith('tariff_'))
async def successful_payment(message: Message, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        #await message.bot.refund_star_payment(message.from_user.id,
                                              #message.successful_payment.telegram_payment_charge_id)
        tariff = await db.get_tariff(message.successful_payment.invoice_payload.split('_')[1])
        await db.tariff_payed(message.from_user.id, tariff)
        # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(st.DeveloperProfile.profile)
        developer_info = await db.get_developer(message.from_user.id)
        await message.answer(f'<b>–Æ–∑–µ—Ä–Ω–µ–π–º:</b> {developer_info.username}\n'
                             f'<b>–¢–∞—Ä–∏—Ñ:</b> {tariff.name if tariff.name else '–ù–µ –≤—ã–±—Ä–∞–Ω'}\n'
                             f'<b>–†–µ–π—Ç–∏–Ω–≥:</b> {developer_info.rating if developer_info.rating > 0 else '–ù–µ—Ç –æ—Ü–µ–Ω–æ–∫'}\n'
                             f'<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤:</b> {developer_info.completed_orders}\n'
                             f'<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—Ç–∫–ª–∏–∫–æ–≤:</b> {developer_info.responses}\n',
                             reply_markup=kb.developer_profile)
    except Exception:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


"""

–î–µ–π—Å—Ç–≤–∏—è –≤ —Ä–∞–∑–¥–µ–ª–µ "–ú–æ–∏ –æ—Ç–∫–ª–∏–∫–∏"
----------------------------------------------------------------------------------------------
"""
@developer.message(F.text == 'üí•Ô∏è –ú–æ–∏ –æ—Ç–∫–ª–∏–∫–∏', st.DeveloperMenu.menu)
async def developer_responses(message: Message, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(st.DeveloperResponse.list)
        if await db.is_response_from_developer(message.from_user.id):
            responses = await db.developer_responses(message.from_user.id)
            for response in responses:
                order = await db.get_order(response.order)
                await message.answer(f'{f'<b>–ó–∞–∫–∞–∑</b>: {order.title}' if order else '–ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω –¥—Ä—É–≥–∏–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º'}\n'
                                     f'<b>–û—Ç–∫–ª–∏–∫</b>: {response.description}\n'
                                     f'<b>–°—Ç–∞—Ç—É—Å</b>: {response.status}',
                                     reply_markup=await kb.delete_response(response.id))
            await message.answer('–ú–µ–Ω—é üëá',
                                 reply_markup=kb.back)
        else:
            await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –æ—Ç–∫–ª–∏–∫–æ–≤',
                                     reply_markup= kb.back)
    except Exception:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


@developer.callback_query(F.data.startswith('delete-response_'), st.DeveloperResponse.list)
async def delete_response(callback: CallbackQuery, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        # –æ—Ç–≤–µ—Ç –Ω–∞ callback
        await callback.answer('')
        # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(st.DeveloperResponse.delete_response)
        await callback.message.edit_text(f'‚ÄºÔ∏è –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –æ—Ç–∫–ª–∏–∫?',
                                      reply_markup=await kb.sure_delete_response(callback.data.split('_')[1]))
    except Exception:
        await callback.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                                      '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


@developer.callback_query(F.data.startswith('cancel-delete-response_'), st.DeveloperResponse.delete_response)
async def cancel_delete_response(callback: CallbackQuery, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        # –æ—Ç–≤–µ—Ç –Ω–∞ callback
        await callback.answer('')
        # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(st.DeveloperResponse.list)
        response = await db.get_response(callback.data.split('_')[1])
        order = await db.get_order(response.order)
        await callback.message.edit_text(f'<b>–ó–∞–∫–∞–∑</b>: {order.title}\n'
                                 f'<b>–û—Ç–∫–ª–∏–∫</b>: {response.description}\n'
                                 f'<b>–°—Ç–∞—Ç—É—Å</b>: {response.status}',
                                 reply_markup=await kb.delete_response(response.id))
    except Exception:
        await callback.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                                      '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


@developer.callback_query(F.data.startswith('ok-delete-response_'), st.DeveloperResponse.delete_response)
async def ok_delete_response(callback: CallbackQuery, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        # –æ—Ç–≤–µ—Ç –Ω–∞ callback
        await callback.answer('')
        # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(st.DeveloperResponse.list)
        await db.delete_response(callback.data.split('_')[1])
        await callback.message.delete()
    except Exception:
        await callback.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                                      '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


"""

–î–µ–π—Å—Ç–≤–∏—è –≤ —Ä–∞–∑–¥–µ–ª–µ "–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã"
----------------------------------------------------------------------------------------------
"""
@developer.message(F.text == '‚óÄÔ∏è –ù–∞–∑–∞–¥', st.CompletedOrder.order_info)
@developer.message(F.text == 'üîπ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã', st.DeveloperMenu.menu)
async def completed_orders(message: Message, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        orders = await db.completed_orders(message.from_user.id)
        if not orders:
            # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.set_state(st.CompletedOrder.list)
            await message.answer('–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤',
                                 reply_markup=kb.back)
        else:
            total_pages = (len(orders) + 5 - 1) // 5  # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
            await state.update_data(total_pages=total_pages)
            await state.update_data(page=1)
            # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.set_state(st.CompletedOrder.list)
            orders = await db.order_history_pagination(message.from_user.id, 1)
            await message.answer(f'<b>–°—Ç—Ä–∞–Ω–∏—Ü–∞ 1 –∏–∑ {total_pages}</b>',
                                 reply_markup=await kb.completed_orders_pagination(orders, 1, total_pages))
            await message.answer('–ú–µ–Ω—é üëá',
                             reply_markup=kb.back)
    except Exception:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                                      '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


@developer.callback_query(F.data.startswith('next-completed-order_'), st.CompletedOrder.list)
async def next_completed_order(callback: CallbackQuery, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        await callback.answer('')
        page = int(callback.data.split('_')[1])
        await state.update_data(page=page)
        orders = await db.completed_orders_pagination(callback.from_user.id, page)
        tdata = await state.get_data()
        total_pages = tdata['total_pages']
        await callback.message.edit_text(f'<b>–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}</b>',
                             reply_markup=await kb.completed_orders_pagination(orders, page, total_pages))
    except Exception:
        await callback.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


@developer.callback_query(F.data.startswith('prev-completed-order_'), st.CompletedOrder.list)
async def prev_completed_order(callback: CallbackQuery, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        await callback.answer('')
        page = int(callback.data.split('_')[1])
        await state.update_data(page=page)
        orders = await db.completed_orders_pagination(callback.from_user.id ,page)
        tdata = await state.get_data()
        total_pages = tdata['total_pages']
        await callback.message.edit_text(f'<b>–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}</b>',
                             reply_markup=await kb.completed_orders_pagination(orders, page, total_pages))
    except Exception:
        await callback.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


@developer.callback_query(F.data.startswith('completed-order-info_'), st.CompletedOrder.list)
async def completed_order_info(callback: CallbackQuery, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        # –æ—Ç–≤–µ—Ç –Ω–∞ callback
        await callback.answer('')
        # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(st.CompletedOrder.order_info)
        order = await db.get_completed_order(callback.data.split('_')[1])
        await callback.message.edit_text(f'<b>–ó–∞–∫–∞–∑:</b> {order.title}\n'
                                         f'<b>–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞:</b> {order.description}\n'
                                         f'<b>–û—Ü–µ–Ω–∫–∞ –∑–∞–∫–∞–∑—á–∏–∫–∞:</b>  {order.mark_for_developer 
                                         if order.mark_for_developer else '–ù–µ –æ—Ü–µ–Ω–µ–Ω–æ'}\n'
                                         f'<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∑–∞–∫–∞–∑—á–∏–∫–∞:</b> {order.feedback_about_developer 
                                         if order.feedback_about_developer else '–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'}\n'
                                         f'<b>–î–∞—Ç–∞:</b> {order.date.strftime('%d.%m.%Y')}\n',
                                     reply_markup=await kb.completed_order_info())
    except Exception:
        await callback.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                                      '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


@developer.callback_query(F.data == 'hide_completed_order_info', st.CompletedOrder.order_info)
async def hide_completed_order_info(callback: CallbackQuery, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        # –æ—Ç–≤–µ—Ç –Ω–∞ callback
        await callback.answer('')
        # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(st.CompletedOrder.list)
        tdata = await state.get_data()
        page = tdata['page']
        total_pages = tdata['total_pages']
        orders = await db.order_history_pagination(callback.from_user.id, page)
        await callback.message.edit_text(f'<b>–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}</b>',
                             reply_markup=await kb.completed_orders_pagination(orders, page, total_pages))
    except Exception:
        await callback.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                                      '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


"""

–ß—Ç–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∑–∞–∫—Ä—ã—Ç–æ–≥–æ —á–∞—Ç–∞ (–º–æ–¥–µ—Ä–∞—Ü–∏—è)
----------------------------------------------------------------------------------------------

"""


@developer.callback_query(lambda callback: callback.message.chat.id == ADMIN_DEVELOPER_CHAT_ID, F.data.startswith('moderation-passed_'))  # —Ö—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–æ–≥–¥–∞, –∫–æ–≥–¥–∞ –≤ –Ω—É–∂–Ω—ã–π —á–∞—Ç –ø—Ä–∏—Å—ã–ª–∞–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ
async def moderation_passed(callback: CallbackQuery, bot: Bot):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        # –æ—Ç–≤–µ—Ç –Ω–∞ callback
        await callback.answer('–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–∞–±–æ—Ç—É')
        await callback.message.delete()
        # –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ callback id –∑–∞–ø—Ä–æ—Å–∞
        developer_info = await db.developer_activate(callback.data.split('_')[1])
        await bot.send_message(chat_id=developer_info.tg_id, text='<b>‚ÄºÔ∏è –í–∞–º –æ–¥–æ–±—Ä–µ–Ω –¥–æ—Å—Ç—É–ø –∫ –ø–∞–Ω–µ–ª–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞</b>\n\n'
                                                                  '–ß—Ç–æ–±—ã –µ—ë –æ—Ç–∫—Ä—ã—Ç—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start')
    except Exception:
        await callback.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


@developer.callback_query(lambda callback: callback.message.chat.id == ADMIN_DEVELOPER_CHAT_ID, F.data.startswith('moderation-failed_'))  # —Ö—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–æ–≥–¥–∞, –∫–æ–≥–¥–∞ –≤ –Ω—É–∂–Ω—ã–π —á–∞—Ç –ø—Ä–∏—Å—ã–ª–∞–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ
async def moderation_failed(callback: CallbackQuery, bot: Bot):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        # –æ—Ç–≤–µ—Ç –Ω–∞ callback
        await callback.answer('–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–∞–±–æ—Ç—É')
        await callback.message.delete()
        # –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ callback id –∑–∞–ø—Ä–æ—Å–∞
        developer_info = await db.delete_developer(callback.data.split('_')[1])
        await bot.send_message(chat_id=developer_info.tg_id, text='<b>‚ÄºÔ∏è –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞–º –Ω–µ –æ–¥–æ–±—Ä–µ–Ω –¥–æ—Å—Ç—É–ø –∫ –ø–∞–Ω–µ–ª–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞</b>')
    except Exception:
        await callback.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')