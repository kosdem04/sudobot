from tkinter.ttk import Label

from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, LabeledPrice, PreCheckoutQuery
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from pyexpat.errors import messages

from config import ADMIN_DEVELOPER_CHAT_ID
import app.database.requests as db
import app.states as st
import app.keyboards as kb

developer = Router()

@developer.callback_query(F.data == 'developer', st.Register.role)
async def developer_moderation(callback: CallbackQuery, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        if await db.is_moderation_developer(callback.from_user.id):
            await callback.answer('')
            await callback.message.answer('–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏')
        else:
            # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.set_state(st.Register.moderation)
            await callback.answer('')
            await callback.message.answer('‚ÄºÔ∏è –í–ù–ò–ú–ê–ù–ò–ï ‚ÄºÔ∏è\n\n'
                                          '–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Å—Ç–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –Ω–∞ –Ω–∞—à–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ, <b>–í–ê–ú –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:</b>\n\n'
                                          '<b>1.</b> –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ –∏–º–µ–µ—Ç "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"\n\n'
                                          '<b>2.</b> –í –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ <b>–í–∞—à –≥–∏—Ç—Ö–∞–± (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ</b>)\n\n'
                                          '<b>3.</b> –û–∂–∏–¥–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏', reply_markup=kb.back)
    except Exception:
        await callback.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


@developer.message(F.text == 'üßë‚Äçüíª –°—Ç–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º', st.ClientMenu.menu)
async def become_developer(message: Message, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        if await db.is_developer(message.from_user.id):
            await state.clear()
            # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.set_state(st.DeveloperMenu.menu)
            await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=kb.developer_main)
        elif await db.is_moderation_developer(message.from_user.id):
            await message.answer('–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏')
        else:
            await db.add_client(message.from_user.id)
            # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.set_state(st.Register.moderation)
            await message.answer('‚ÄºÔ∏è –í–ù–ò–ú–ê–ù–ò–ï ‚ÄºÔ∏è\n\n'
                                 '–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Å—Ç–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –Ω–∞ –Ω–∞—à–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ, <b>–í–ê–ú –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:</b>\n\n'
                                 '<b>1.</b> –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ –∏–º–µ–µ—Ç "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"\n\n'
                                 '<b>2.</b> –í –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ <b>–í–∞—à –≥–∏—Ç—Ö–∞–± (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ</b>)\n\n'
                                 '<b>3.</b> –û–∂–∏–¥–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏', reply_markup=kb.back)
    except Exception:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


@developer.message(st.Register.moderation)
async def developer_moderation_github(message: Message, bot: Bot, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        # –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤ –ë–î
        await db.add_developer(message.from_user.id, message.from_user.username)
        await bot.send_message(chat_id=ADMIN_DEVELOPER_CHAT_ID,
                               text=f'‚ÄºÔ∏è –í–ù–ò–ú–ê–ù–ò–ï ‚ÄºÔ∏è\n'
                                    f'<b>–ù–æ–≤—ã–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:</b>\n\n'
                                    f'<b>–ù–∏–∫–Ω–µ–π–º:</b> {message.from_user.username}\n'
                                    f'<b>GitHub:</b> {message.text}',
                               reply_markup=await kb.developer_moderation(message.from_user.id))
        # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        await message.answer('‚ÄºÔ∏è –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é')
    except Exception:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


@developer.message(F.text == '‚óÄÔ∏è –ù–∞–∑–∞–¥', st.Market.list)
@developer.message(F.text == '‚óÄÔ∏è –ù–∞–∑–∞–¥', st.DeveloperProfile.profile)
async def developer_main_menu(message: Message, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        await state.clear()
        # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(st.DeveloperMenu.menu)
        await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=kb.developer_main)
    except Exception:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


"""

–î–µ–π—Å—Ç–≤–∏—è –≤ —Ä–∞–∑–¥–µ–ª–µ "–ë–∏—Ä–∂–∞"
----------------------------------------------------------------------------------------------
"""
@developer.message(F.text == '‚ùå –û—Ç–º–µ–Ω–∞', st.Market.make_response)
@developer.message(F.text == '‚óÄÔ∏è –ù–∞–∑–∞–¥', st.Market.order_info)
@developer.message(F.text == 'üí∞ –ë–∏—Ä–∂–∞', st.DeveloperMenu.menu)
async def market_list(message: Message, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(st.Market.list)
        await message.answer('üí≤ –ó–∞–∫–∞–∑—ã üí≤')
        orders = await db.all_orders()
        for order in orders:
            await message.answer(f'<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {order.title}\n',
                                 reply_markup=await kb.order_info(order.id))
        await message.answer('–ú–µ–Ω—é üëá',
                             reply_markup=kb.back)
    except Exception:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


@developer.callback_query(F.data.startswith('order-info_'), st.Market.list)
async def market_order_info(callback: CallbackQuery, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(st.Market.order_info)
        await state.update_data(order_info=callback.data.split('_')[1])
        await callback.answer('')
        order = await db.get_order(callback.data.split('_')[1])
        is_response = await db.is_response_from_developer(callback.from_user.id)
        await callback.message.answer(f'–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞\n\n'
                                      f'<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {order.title}\n'
                                      f'<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {order.description}'
                                      f'{f'\n\n‚ÄºÔ∏è <b>–í—ã —É–∂–µ –æ—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å –Ω–∞ —ç—Ç–æ—Ç –∑–∞–∫–∞–∑</b>' if is_response else ''}',
                                          reply_markup=None if is_response else await kb.make_response(order.id))
    except Exception:
        await callback.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


@developer.callback_query(F.data.startswith('make-response_'), st.Market.order_info)
async def market_make_response(callback: CallbackQuery, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(st.Market.make_response)
        await callback.answer('')
        await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–∫–ª–∏–∫–∞ (–Ω–µ –±–æ–ª–µ–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤)',
                                      reply_markup=kb.cancel)
    except Exception:
        await callback.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


@developer.message(st.Market.make_response)
async def market_send_response(message: Message, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        if len(message.text) > 10000:
            await message.answer('–¢–µ–∫—Å—Ç –æ—Ç–∫–ª–∏–∫–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª–µ–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤')
        else:
            # –±–µ—Ä—ë–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
            tdata = await state.get_data()
            await db.add_response(message.from_user.id, tdata['order_info'], message.text)
            await message.answer('–í–∞—à –æ—Ç–∫–ª–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–∫–∞–∑—á–∏–∫—É.')
            # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.set_state(st.Market.list)
            await message.answer('üí≤ –ó–∞–∫–∞–∑—ã üí≤')
            orders = await db.all_orders()
            for order in orders:
                await message.answer(f'<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {order.title}\n',
                                     reply_markup=await kb.order_info(order.id))
            await message.answer('–ú–µ–Ω—é üëá',
                                 reply_markup=kb.back)
    except Exception:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')



"""

–î–µ–π—Å—Ç–≤–∏—è –≤ —Ä–∞–∑–¥–µ–ª–µ "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"
----------------------------------------------------------------------------------------------
"""
@developer.message(F.text == '‚óÄÔ∏è –ù–∞–∑–∞–¥', st.DeveloperProfile.tariffs)
@developer.message(F.text == 'üßë‚Äçüíª –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', st.DeveloperMenu.menu)
async def developer_profile(message: Message, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(st.DeveloperProfile.profile)
        developer_info = await db.get_developer(message.from_user.id)
        tariff = await db.get_tariff(developer_info.tariff)
        await message.answer(f'<b>–Æ–∑–µ—Ä–Ω–µ–π–º:</b> {developer_info.username}\n'
                             f'<b>–¢–∞—Ä–∏—Ñ:</b> {tariff.name if tariff.name else '–ù–µ –≤—ã–±—Ä–∞–Ω'}\n'
                             f'<b>–†–µ–π—Ç–∏–Ω–≥:</b> {developer_info.rating if developer_info.rating > 0 else '–ù–µ—Ç –æ—Ü–µ–Ω–æ–∫'}\n'
                             f'<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤:</b> {developer_info.completed_orders}\n'
                             f'<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—Ç–∫–ª–∏–∫–æ–≤:</b> {developer_info.responses}\n',
                                 reply_markup= kb.developer_profile)
    except Exception:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


"""-------------------------------------------–í—ã–±–æ—Ä –∏ –ø–æ–∫—É–ø–∫–∞ —Ç–∞—Ä–∏—Ñ–∞---------------------------------------------------"""
@developer.message(F.text == 'ü§ñ –í—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ', st.DeveloperProfile.profile)
async def list_of_tariffs(message: Message, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(st.DeveloperProfile.tariffs)
        tariffs = await db.all_tariffs()
        for tariff in tariffs:
            await message.answer(f'<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {tariff.name}\n'
                                 f'<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {tariff.description}\n',
                                 reply_markup=await kb.select_tariff(tariff))
        await message.answer('–ú–µ–Ω—é üëá',
                             reply_markup=kb.back)
    except Exception:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


@developer.callback_query(F.data.startswith('tariff_'), st.DeveloperProfile.tariffs)
async def select_tariff(callback: CallbackQuery, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(st.DeveloperProfile.pay_tariff)
        await callback.answer('')
        tariff = await db.get_tariff(callback.data.split('_')[1])
        await callback.message.answer_invoice(title='–û–ø–ª–∞—Ç–∞ —Ç–∞—Ä–∏—Ñ–∞',
                                              description='–û–ø–ª–∞—Ç–∞ —Ç–∞—Ä–∏—Ñ–∞',
                                              payload=f'tariff_{tariff.id}',
                                              currency='XTR',
                                              prices=[LabeledPrice(label='XTR', amount=tariff.amount)])
    except Exception:
        await callback.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


@developer.pre_checkout_query()
async def pre_checkout_query(query: PreCheckoutQuery):
    await query.answer(True)


@developer.message(F.successful_payment.invoice_payload.startswith('tariff_'))
async def successful_payment(message: Message, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        #await message.bot.refund_star_payment(message.from_user.id,
                                              #message.successful_payment.telegram_payment_charge_id)
        tariff = await db.get_tariff(message.successful_payment.invoice_payload.split('_')[1])
        await db.tariff_payed(message.from_user.id, tariff)
        # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(st.DeveloperProfile.profile)
        developer_info = await db.get_developer(message.from_user.id)
        await message.answer(f'<b>–Æ–∑–µ—Ä–Ω–µ–π–º:</b> {developer_info.username}\n'
                             f'<b>–¢–∞—Ä–∏—Ñ:</b> {tariff.name if tariff.name else '–ù–µ –≤—ã–±—Ä–∞–Ω'}\n'
                             f'<b>–†–µ–π—Ç–∏–Ω–≥:</b> {developer_info.rating if developer_info.rating > 0 else '–ù–µ—Ç –æ—Ü–µ–Ω–æ–∫'}\n'
                             f'<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤:</b> {developer_info.completed_orders}\n'
                             f'<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—Ç–∫–ª–∏–∫–æ–≤:</b> {developer_info.responses}\n',
                             reply_markup=kb.developer_profile)
    except Exception:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')





"""

–ß—Ç–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∑–∞–∫—Ä—ã—Ç–æ–≥–æ —á–∞—Ç–∞ (–º–æ–¥–µ—Ä–∞—Ü–∏—è)
----------------------------------------------------------------------------------------------

"""


@developer.callback_query(lambda callback: callback.message.chat.id == ADMIN_DEVELOPER_CHAT_ID, F.data.startswith('moderation-passed_'))  # —Ö—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–æ–≥–¥–∞, –∫–æ–≥–¥–∞ –≤ –Ω—É–∂–Ω—ã–π —á–∞—Ç –ø—Ä–∏—Å—ã–ª–∞–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ
async def moderation_passed(callback: Message, bot: Bot):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        # –æ—Ç–≤–µ—Ç –Ω–∞ callback
        await callback.answer('–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–∞–±–æ—Ç—É')
        await callback.message.delete()
        # –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ callback id –∑–∞–ø—Ä–æ—Å–∞
        developer_info = await db.developer_activate(callback.data.split('_')[1])
        await bot.send_message(chat_id=developer_info.tg_id, text='<b>‚ÄºÔ∏è –í–∞–º –æ–¥–æ–±—Ä–µ–Ω –¥–æ—Å—Ç—É–ø –∫ –ø–∞–Ω–µ–ª–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞</b>\n\n'
                                                                  '–ß—Ç–æ–±—ã –µ—ë –æ—Ç–∫—Ä—ã—Ç—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start')
    except Exception:
        await callback.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


@developer.callback_query(lambda callback: callback.message.chat.id == ADMIN_DEVELOPER_CHAT_ID, F.data.startswith('moderation-failed_'))  # —Ö—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–æ–≥–¥–∞, –∫–æ–≥–¥–∞ –≤ –Ω—É–∂–Ω—ã–π —á–∞—Ç –ø—Ä–∏—Å—ã–ª–∞–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ
async def moderation_failed(callback: Message, bot: Bot):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        # –æ—Ç–≤–µ—Ç –Ω–∞ callback
        await callback.answer('–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–∞–±–æ—Ç—É')
        await callback.message.delete()
        # –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ callback id –∑–∞–ø—Ä–æ—Å–∞
        developer_info = await db.delete_developer(callback.data.split('_')[1])
        await bot.send_message(chat_id=developer_info.tg_id, text='<b>‚ÄºÔ∏è –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞–º –Ω–µ –æ–¥–æ–±—Ä–µ–Ω –¥–æ—Å—Ç—É–ø –∫ –ø–∞–Ω–µ–ª–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞</b>')
    except Exception:
        await callback.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')