from aiogram import Router, F, Bot
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Filter, CommandStart, Command
from config import ADMINS
import app.keyboards as kb
import app.database.requests as db
import app.states as st

admin = Router()


class AdminProtect(Filter):
    def __init__(self):
        self.admins = ADMINS

    async def __call__(self, message: Message):
        return message.from_user.id in self.admins
    

"""

–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
----------------------------------------------------------------------------------------------
"""
@admin.message(F.text == '‚ùå –û—Ç–º–µ–Ω–∞', st.SendAll.sure)
@admin.message(F.text == '‚ùå –û—Ç–º–µ–Ω–∞', st.SendAll.message)
@admin.message(F.text == '‚ùå –û—Ç–º–µ–Ω–∞', st.SendAll.select_method)
@admin.message(AdminProtect(), F.text == '‚óÄÔ∏è –ù–∞–∑–∞–¥', st.AdminTariff.all_tariffs)
@admin.message(AdminProtect(), Command('admin_panel'))
async def admin_panel(message: Message, state: FSMContext):
    await state.clear()
    await state.set_state(st.AdminMenu.menu)
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–æ–æ–±—â–µ–Ω–∏–µ, reply_markup ‚Äî –ø–∞—Ä–∞–º–µ—Ç—Ä —Å –Ω—É–∂–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await message.answer('–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', reply_markup=kb.admin_panel)


@admin.message(AdminProtect(), F.text == '‚óÄÔ∏è –í—ã–π—Ç–∏', st.AdminMenu.menu)
async def back_admin_panel(message: Message, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        if await db.is_client(message.from_user.id):
            await state.clear()
            # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.set_state(st.ClientMenu.menu)
            await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=kb.client_main)
        else:
            # –¥–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –≤ –ë–î
            await db.add_client(message.from_user.id)
            await state.clear()
            # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.set_state(st.ClientMenu.menu)
            await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=kb.client_main)
    except Exception:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


"""

–î–µ–π—Å—Ç–≤–∏—è –≤ —Ä–∞–∑–¥–µ–ª–µ "–¢–∞—Ä–∏—Ñ—ã"
----------------------------------------------------------------------------------------------
"""
@admin.message(F.text == '‚ùå –û—Ç–º–µ–Ω–∞', st.EditTariff.sure)
@admin.message(F.text == '‚ùå –û—Ç–º–µ–Ω–∞', st.EditTariff.amount)
@admin.message(F.text == '‚ùå –û—Ç–º–µ–Ω–∞', st.EditTariff.responses)
@admin.message(F.text == '‚ùå –û—Ç–º–µ–Ω–∞', st.EditTariff.description)
@admin.message(F.text == '‚ùå –û—Ç–º–µ–Ω–∞', st.EditTariff.name)
@admin.message(F.text == '‚ùå –û—Ç–º–µ–Ω–∞', st.AddTariff.sure)
@admin.message(F.text == '‚ùå –û—Ç–º–µ–Ω–∞', st.AddTariff.amount)
@admin.message(F.text == '‚ùå –û—Ç–º–µ–Ω–∞', st.AddTariff.responses)
@admin.message(F.text == '‚ùå –û—Ç–º–µ–Ω–∞', st.AddTariff.description)
@admin.message(F.text == '‚ùå –û—Ç–º–µ–Ω–∞', st.AddTariff.name)
@admin.message(AdminProtect(), F.text == 'ü§ñ –¢–∞—Ä–∏—Ñ—ã', st.AdminMenu.menu)
async def admin_statistic(message: Message, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(st.AdminTariff.all_tariffs)
        # –±–µ—Ä—ë–º –∏–∑ –ë–î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ñ–∏–Ω–∞–Ω—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        tariffs = await db.all_tariffs()
        if not tariffs:
            await message.answer('–ù–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞',
                                 reply_markup=kb.tariffs_menu)
        else:
            for tariff in tariffs:
                await message.answer(f'<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {tariff.name}\n'
                                     f'<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {tariff.description}\n\n'
                                     f'<b>–û—Ç–∫–ª–∏–∫–æ–≤ –≤ –¥–µ–Ω—å:</b> {tariff.responses}\n'
                                     f'<b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {tariff.amount}‚ÇΩ',
                                     reply_markup=await kb.tariff_menu(tariff))
            await message.answer('–ú–µ–Ω—é üëá',
                                 reply_markup=kb.tariffs_menu)
    except Exception:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


"""-------------------------------------------–î–æ–±–∞–≤–∏—Ç—å —Ç–∞—Ä–∏—Ñ---------------------------------------------------"""
@admin.message(F.text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–∞—Ä–∏—Ñ', st.AdminTariff.all_tariffs)
async def tariff_name(message: Message, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(st.AddTariff.name)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ (–¥–æ 25 —Å–∏–º–≤–æ–ª–æ–≤)',
                             reply_markup=kb.cancel)
    except Exception:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


@admin.message(st.AddTariff.name)
async def tariff_description(message: Message, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        if len(message.text) > 25:
            await message.answer('–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª–µ–µ 25 —Å–∏–º–≤–æ–ª–æ–≤',
                                 reply_markup=kb.cancel)
        else:
            # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –Ω—É–∂–Ω–æ–µ –Ω–∞–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–µ–¥—ë–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            await state.update_data(name=message.text)
            # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.set_state(st.AddTariff.description)
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞',
                                 reply_markup=kb.cancel)
    except Exception:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


@admin.message(st.AddTariff.description)
async def tariff_responses(message: Message, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        if len(message.text) > 10000:
            await message.answer('–û–ø–∏—Å–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª–µ–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤',
                                 reply_markup=kb.cancel)
        else:
            # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –Ω—É–∂–Ω–æ–µ –Ω–∞–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–µ–¥—ë–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            await state.update_data(description=message.text)

            # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.set_state(st.AddTariff.responses)
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤ –¥–µ–Ω—å –æ—Ç–∫–ª–∏–∫–æ–≤ –ø–æ —ç—Ç–æ–º—É —Ç–∞—Ä–∏—Ñ—É',
                                 reply_markup=kb.cancel)
    except Exception:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


@admin.message(st.AddTariff.responses)
async def tariff_amount(message: Message, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        if message.text.isdigit() and not message.text.isalpha():
            # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –Ω—É–∂–Ω–æ–µ –Ω–∞–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–µ–¥—ë–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            await state.update_data(responses=int(message.text))
            # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.set_state(st.AddTariff.amount)
            await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–æ–≤–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ –≤ —Ä—É–±–ª—è—Ö',
                                 reply_markup=kb.cancel)
        else:
            await message.answer('–í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ\n'
                                 '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤ –¥–µ–Ω—å –æ—Ç–∫–ª–∏–∫–æ–≤ –ø–æ —ç—Ç–æ–º—É —Ç–∞—Ä–∏—Ñ—É',
                                 reply_markup=kb.cancel)
    except Exception:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


@admin.message(st.AddTariff.amount)
async def sure_add_tariff(message: Message, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        if message.text.isdigit() and not message.text.isalpha():
            # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –Ω—É–∂–Ω–æ–µ –Ω–∞–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–µ–¥—ë–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            await state.update_data(amount=int(message.text))
            # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.set_state(st.AddTariff.sure)
            tdata = await state.get_data()
            await message.answer(f'–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç–∞—Ä–∏—Ñ —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏?\n\n'
                                 f'<b>–ù–∞–∑–≤–∞–Ω–∏–µ</b>: {tdata['name']}\n'
                                 f'<b>–û–ø–∏—Å–∞–Ω–∏–µ</b>: {tdata['description']}\n\n'
                                 f'<b>–û—Ç–∫–ª–∏–∫–æ–≤ –≤ –¥–µ–Ω—å</b>: {tdata['responses']}\n'
                                 f'<b>–°—Ç–æ–∏–º–æ—Å—Ç—å</b>: {tdata['amount']}‚ÇΩ',
                                 reply_markup=kb.sure)
        else:
            await message.answer('–í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ\n'
                                 '–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–æ–≤–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ –≤ —Ä—É–±–ª—è—Ö',
                                 reply_markup=kb.cancel)
    except Exception:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


@admin.message(F.text == 'üåü –î–∞', st.AddTariff.sure)
async def ok_add_tariff(message: Message, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        # –±–µ—Ä—ë–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
        tdata = await state.get_data()
        # –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –≤ –ë–î
        await db.add_tariff(tdata['name'] ,tdata['description'], tdata['responses'], tdata['amount'])
        # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(st.AdminTariff.all_tariffs)
        # –±–µ—Ä—ë–º –∏–∑ –ë–î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ñ–∏–Ω–∞–Ω—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        tariffs = await db.all_tariffs()
        if not tariffs:
            await message.answer('–ù–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞',
                                 reply_markup=kb.tariffs_menu)
        else:
            for tariff in tariffs:
                await message.answer(f'<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {tariff.name}\n'
                                     f'<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {tariff.description}\n\n'
                                     f'<b>–û—Ç–∫–ª–∏–∫–æ–≤ –≤ –¥–µ–Ω—å:</b> {tariff.responses}\n'
                                     f'<b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {tariff.amount}‚ÇΩ',
                                     reply_markup=await kb.tariff_menu(tariff))
            await message.answer('–ú–µ–Ω—é üëá',
                                 reply_markup=kb.tariffs_menu)
    except Exception:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


"""-------------------------------------------–ò–∑–º–µ–Ω–∏—Ç—å —Ç–∞—Ä–∏—Ñ---------------------------------------------------"""
@admin.callback_query(F.data.startswith('admin-edit-tariff_'), st.AdminTariff.all_tariffs)
async def edit_tariff_name(callback: CallbackQuery, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        await callback.answer('')
        await state.update_data(tariff=callback.data.split('_')[1])
        # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(st.EditTariff.name)
        await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Ç–∞—Ä–∏—Ñ–∞ (–¥–æ 25 —Å–∏–º–≤–æ–ª–æ–≤)',
                             reply_markup=kb.cancel)
    except Exception:
        await callback.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


@admin.message(st.EditTariff.name)
async def edit_tariff_description(message: Message, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        if len(message.text) > 25:
            await message.answer('–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª–µ–µ 25 —Å–∏–º–≤–æ–ª–æ–≤',
                                 reply_markup=kb.cancel)
        else:
            # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –Ω—É–∂–Ω–æ–µ –Ω–∞–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–µ–¥—ë–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            await state.update_data(name=message.text)
            # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.set_state(st.EditTariff.description)
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞',
                                 reply_markup=kb.cancel)
    except Exception:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


@admin.message(st.EditTariff.description)
async def edit_tariff_responses(message: Message, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        if len(message.text) > 10000:
            await message.answer('–û–ø–∏—Å–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª–µ–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤',
                                 reply_markup=kb.cancel)
        else:
            # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –Ω—É–∂–Ω–æ–µ –Ω–∞–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–µ–¥—ë–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            await state.update_data(description=message.text)

            # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.set_state(st.EditTariff.responses)
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤ –¥–µ–Ω—å –æ—Ç–∫–ª–∏–∫–æ–≤ –ø–æ —ç—Ç–æ–º—É —Ç–∞—Ä–∏—Ñ—É',
                                 reply_markup=kb.cancel)
    except Exception:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


@admin.message(st.EditTariff.responses)
async def edit_tariff_amount(message: Message, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        if message.text.isdigit() and not message.text.isalpha():
            # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –Ω—É–∂–Ω–æ–µ –Ω–∞–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–µ–¥—ë–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            await state.update_data(responses=int(message.text))
            # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.set_state(st.EditTariff.amount)
            await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–∞—Ä–∏—Ñ–∞ –≤ —Ä—É–±–ª—è—Ö',
                                 reply_markup=kb.cancel)
        else:
            await message.answer('–í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ\n'
                                 '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤ –¥–µ–Ω—å –æ—Ç–∫–ª–∏–∫–æ–≤ –ø–æ —ç—Ç–æ–º—É —Ç–∞—Ä–∏—Ñ—É',
                                 reply_markup=kb.cancel)
    except Exception:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


@admin.message(st.EditTariff.amount)
async def sure_edit_tariff(message: Message, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        if message.text.isdigit() and not message.text.isalpha():
            # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –Ω—É–∂–Ω–æ–µ –Ω–∞–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–µ–¥—ë–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            await state.update_data(amount=int(message.text))
            # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.set_state(st.EditTariff.sure)
            tdata = await state.get_data()
            await message.answer(f'–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–∞—Ä–∏—Ñ–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ?\n\n'
                                 f'<b>–ù–∞–∑–≤–∞–Ω–∏–µ</b>: {tdata['name']}\n'
                                 f'<b>–û–ø–∏—Å–∞–Ω–∏–µ</b>: {tdata['description']}\n\n'
                                 f'<b>–û—Ç–∫–ª–∏–∫–æ–≤ –≤ –¥–µ–Ω—å</b>: {tdata['responses']}\n'
                                 f'<b>–°—Ç–æ–∏–º–æ—Å—Ç—å</b>: {tdata['amount']}‚ÇΩ',
                                 reply_markup=kb.sure)
        else:
            await message.answer('–í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ\n'
                                 '–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–∞—Ä–∏—Ñ–∞ –≤ —Ä—É–±–ª—è—Ö',
                                 reply_markup=kb.cancel)
    except Exception:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


@admin.message(F.text == 'üåü –î–∞', st.EditTariff.sure)
async def ok_edit_tariff(message: Message, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        # –±–µ—Ä—ë–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
        tdata = await state.get_data()
        # –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –≤ –ë–î
        await db.edit_tariff(tdata['tariff'] ,tdata['name'] ,tdata['description'], tdata['responses'], tdata['amount'])
        # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(st.AdminTariff.all_tariffs)
        # –±–µ—Ä—ë–º –∏–∑ –ë–î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ñ–∏–Ω–∞–Ω—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        tariffs = await db.all_tariffs()
        for tariff in tariffs:
            await message.answer(f'<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {tariff.name}\n'
                                 f'<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {tariff.description}\n\n'
                                 f'<b>–û—Ç–∫–ª–∏–∫–æ–≤ –≤ –¥–µ–Ω—å:</b> {tariff.responses}\n'
                                 f'<b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {tariff.amount}‚ÇΩ',
                                 reply_markup=await kb.tariff_menu(tariff))
        await message.answer('–ú–µ–Ω—é üëá',
                             reply_markup=kb.tariffs_menu)
    except Exception:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


"""-------------------------------------------–£–¥–∞–ª–∏—Ç—å —Ç–∞—Ä–∏—Ñ---------------------------------------------------"""
@admin.callback_query(F.data.startswith('admin-delete-tariff_'), st.AdminTariff.all_tariffs)
async def sure_delete_tariff(callback: CallbackQuery, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        await callback.answer('')
        # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(st.AdminTariff.delete_tariff)
        await callback.message.edit_text('‚ÄºÔ∏è –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–∞—Ä–∏—Ñ?',
                             reply_markup=await kb.sure_delete_tariff(callback.data.split('_')[1]))
    except Exception:
        await callback.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


@admin.callback_query(F.data.startswith('cancel-delete-tariff_'), st.AdminTariff.delete_tariff)
async def cancel_delete_tariff(callback: CallbackQuery, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        # –æ—Ç–≤–µ—Ç –Ω–∞ callback
        await callback.answer('')
        # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(st.AdminTariff.all_tariffs)
        tariff = await db.get_tariff(callback.data.split('_')[1])
        await callback.message.edit_text(f'<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {tariff.name}\n'
                             f'<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {tariff.description}\n\n'
                             f'<b>–û—Ç–∫–ª–∏–∫–æ–≤ –≤ –¥–µ–Ω—å:</b> {tariff.responses}\n'
                             f'<b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {tariff.amount}‚ÇΩ',
                             reply_markup=await kb.tariff_menu(tariff))
    except Exception:
        await callback.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                                      '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


@admin.callback_query(F.data.startswith('ok-delete-tariff_'), st.AdminTariff.delete_tariff)
async def ok_delete_tariff(callback: CallbackQuery, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        # –æ—Ç–≤–µ—Ç –Ω–∞ callback
        await callback.answer('')
        # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(st.AdminTariff.all_tariffs)
        await db.delete_tariff(callback.data.split('_')[1])
        await callback.message.delete()
    except Exception:
        await callback.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                                      '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


"""

–î–µ–π—Å—Ç–≤–∏—è –≤ —Ä–∞–∑–¥–µ–ª–µ "–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"
----------------------------------------------------------------------------------------------
"""
@admin.message(AdminProtect(), F.text == '‚úçÔ∏è –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É', st.AdminMenu.menu)
async def sendall_select_method(message: Message, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(st.SendAll.select_method)
        # –±–µ—Ä—ë–º –∏–∑ –ë–î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ñ–∏–Ω–∞–Ω—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ —Ä–∞—Å—Å—ã–ª–∫–∏:',
                         reply_markup=await kb.sendall_methods())
        await message.answer('–ú–µ–Ω—é üëá',
                             reply_markup=kb.cancel)
    except Exception:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


@admin.callback_query(F.data.startswith('sendall_'), st.SendAll.select_method)
async def sendall_message(callback: CallbackQuery, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        # –æ—Ç–≤–µ—Ç –Ω–∞ callback
        await callback.answer('')
        # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(st.SendAll.message)
        await state.update_data(method=callback.data.split('_')[1])
        await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è')
    except Exception:
        await callback.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                                      '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


@admin.message(st.SendAll.message)
async def sure_sendall(message: Message, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –Ω—É–∂–Ω–æ–µ –Ω–∞–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–µ–¥—ë–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        await state.update_data(message=message.text)
        # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(st.SendAll.sure)
        tdata = await state.get_data()
        recipients = '–í—Å–µ' if tdata['method']=='1' else '–ó–∞–∫–∞–∑—á–∏–∫–∏' if tdata['method']=='2' else '–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏'
        await message.answer(f'–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é —Ä–∞—Å—Å—ã–ª–∫—É?\n\n'
                             f'<b>–ö—Ç–æ –ø–æ–ª—É—á–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ</b>: {recipients}\n'
                             f'<b>–°–æ–æ–±—â–µ–Ω–∏–µ</b>: {tdata['message']}',
                             reply_markup=kb.sure)
    except Exception:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


@admin.message(AdminProtect(), F.text == 'üåü –î–∞', st.SendAll.sure)
async def ok_sendall_sure(message: Message, bot: Bot, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        # –±–µ—Ä—ë–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
        tdata = await state.get_data()
        text = tdata['message']  # —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏
        # –±–µ—Ä—ë–º tg_id –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞
        recipients = await db.all_users() if tdata['method'] == '1' else await db.all_clients() if tdata['method'] == '2' else await db.all_developers()
        for recipient in recipients:
            # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ
            await bot.send_message(chat_id=recipient.tg_id, text=text)
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–æ–æ–±—â–µ–Ω–∏–µ, reply_markup ‚Äî –ø–∞—Ä–∞–º–µ—Ç—Ä —Å –Ω—É–∂–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await state.clear()
        await state.set_state(st.AdminMenu.menu)
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–æ–æ–±—â–µ–Ω–∏–µ, reply_markup ‚Äî –ø–∞—Ä–∞–º–µ—Ç—Ä —Å –Ω—É–∂–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await message.answer('–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞', reply_markup=kb.admin_panel)
    except Exception:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')