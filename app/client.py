from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from sqlalchemy.util import await_only

import app.database.requests as db
import app.states as st
import app.keyboards as kb

from config import ADMIN_ORDER_CHAT_ID

client = Router()


@client.message(F.text == '–ß–∞—Ç')
async def cmd_start(message: Message, state: FSMContext):
    await message.answer(f'ID: {message.chat.id}')


@client.message(F.text == '‚óÄÔ∏è –ù–∞–∑–∞–¥', st.Register.role)
@client.message(F.text == '‚óÄÔ∏è –ù–∞–∑–∞–¥', st.Register.moderation)
@client.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        if await db.is_client(message.from_user.id):
            await state.clear()
            # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.set_state(st.ClientMenu.menu)
            await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=kb.client_main)
        elif await db.is_developer(message.from_user.id):
                await state.clear()
                # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                await state.set_state(st.DeveloperMenu.menu)
                await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=kb.developer_main)
        else:
            await state.set_state(st.Register.role)
            await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç!\n'
                                 '–í—ã–±–µ—Ä–µ—Ç–µ –≤–∞—à—É —Ä–æ–ª—å üëá', reply_markup=await kb.select_role())
    except Exception:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


@client.callback_query(F.data == 'client', st.Register.role)
async def client_after_register_menu(callback: CallbackQuery, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        await state.clear()
        # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(st.ClientMenu.menu)
        await callback.answer('')
        # –¥–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –≤ –ë–î
        await db.add_client(callback.from_user.id)
        await callback.message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=kb.client_main)
    except Exception:
        await callback.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')



@client.message(F.text == '‚óÄÔ∏è –ù–∞–∑–∞–¥', st.ClientProfile.profile)
@client.message(F.text == '‚óÄÔ∏è –ù–∞–∑–∞–¥', st.OrderHistory.list)
@client.message(F.text == '‚óÄÔ∏è –ù–∞–∑–∞–¥', st.ClientResponse.list)
@client.message(F.text == 'üîπ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', st.ClientOrder.order)
@client.message(F.text == '‚óÄÔ∏è –ù–∞–∑–∞–¥', st.ClientOrder.list)
@client.message(F.text == '‚óÄÔ∏è –ù–∞–∑–∞–¥', st.FAQ.client)
async def client_main_menu(message: Message, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        await state.clear()
        # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(st.ClientMenu.menu)
        await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=kb.client_main)
    except Exception:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


@client.message(F.text == 'üòÅ –°—Ç–∞—Ç—å –∑–∞–∫–∞–∑—á–∏–∫–æ–º', st.DeveloperMenu.menu)
async def become_client(message: Message, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        if await db.is_client(message.from_user.id):
            await state.clear()
            # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.set_state(st.ClientMenu.menu)
            await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=kb.client_main)
        else:
            # –¥–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –≤ –ë–î
            await db.add_client(message.from_user.id)
            await state.clear()
            # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.set_state(st.ClientMenu.menu)
            await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=kb.client_main)
    except Exception:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')




"""

–î–µ–π—Å—Ç–≤–∏—è –≤ —Ä–∞–∑–¥–µ–ª–µ "–ú–æ–∏ –∑–∞–∫–∞–∑—ã"
----------------------------------------------------------------------------------------------
"""
@client.message(F.text == '‚ùå –û—Ç–º–µ–Ω–∞', st.AddOrder.sure)
@client.message(F.text == '‚ùå –û—Ç–º–µ–Ω–∞', st.AddOrder.description)
@client.message(F.text == '‚ùå –û—Ç–º–µ–Ω–∞', st.AddOrder.title)
@client.message(F.text == '‚óÄÔ∏è –ù–∞–∑–∞–¥', st.ClientOrder.order)
@client.message(F.text == 'üîπ –ú–æ–∏ –∑–∞–∫–∞–∑—ã', st.ClientMenu.menu)
async def client_order_list(message: Message, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        orders = await db.client_orders(message.from_user.id)
        if not orders:
            # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.set_state(st.ClientOrder.list)
            await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞',
                                 reply_markup=kb.create_and_back)
        else:
            total_pages = (len(orders) + 5 - 1) // 5  # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
            # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.set_state(st.ClientOrder.total_pages)
            await state.update_data(total_pages=total_pages)
            # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.set_state(st.ClientOrder.list)
            orders = await db.client_orders_pagination(message.from_user.id,1)
            await message.answer(f'<b>–°—Ç—Ä–∞–Ω–∏—Ü–∞ 1 –∏–∑ {total_pages}</b>',
                                 reply_markup=await kb.client_orders(orders, 1, total_pages))
            await message.answer('–ú–µ–Ω—é üëá',
                                 reply_markup=kb.create_and_back)
    except Exception:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


@client.callback_query(F.data.startswith('prev-client-order_'), st.ClientOrder.list)
@client.callback_query(F.data.startswith('next-client-order_'), st.ClientOrder.list)
async def client_order_pagination(callback: CallbackQuery, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        await callback.answer('')
        page = int(callback.data.split('_')[1])
        orders = await db.client_orders_pagination(callback.from_user.id,page)
        tdata = await state.get_data()
        total_pages = tdata['total_pages']
        await callback.message.edit_text(f'<b>–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}</b>',
                             reply_markup=await kb.client_orders(orders, page, total_pages))
    except Exception:
        await callback.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


@client.callback_query(F.data.startswith('order_'), st.ClientOrder.list)
async def client_order_info(callback: CallbackQuery, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        # –æ—Ç–≤–µ—Ç –Ω–∞ callback
        await callback.answer('–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞')
        # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(st.ClientOrder.order)
        # –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ callback id –∑–∞–ø—Ä–æ—Å–∞
        order_info = await db.get_order(callback.data.split('_')[1])
        # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –Ω—É–∂–Ω–æ–µ –Ω–∞–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–µ–¥—ë–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        await state.update_data(order=callback.data.split('_')[1])
        await callback.message.answer(f'–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞ üîπ \n\n'
                                      f'<b>–ù–∞–∑–≤–∞–Ω–∏–µ</b>: {order_info.title}\n'
                                      f'<b>–û–ø–∏—Å–∞–Ω–∏–µ</b>:\n{order_info.description}\n\n'
                                      f'{f"<b>‚ÄºÔ∏è –ó–∞–∫–∞–∑ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏</b>" if not order_info.available else ""}',
                             reply_markup=kb.client_order_menu)
    except Exception:
        await callback.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


"""-------------------------------------------–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑---------------------------------------------------"""
@client.message(F.text == '‚ûï –°–æ–∑–¥–∞—Ç—å', st.ClientOrder.list)
async def order_title(message: Message, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(st.AddOrder.title)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ (–¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤)',
                             reply_markup=kb.cancel)
    except Exception:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


@client.message(st.AddOrder.title)
async def order_description(message: Message, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        if len(message.text) > 50:
            await message.answer('–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª–µ–µ 50 —Å–∏–º–≤–æ–ª–æ–≤',
                                 reply_markup=kb.cancel)
        else:
            # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –Ω—É–∂–Ω–æ–µ –Ω–∞–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–µ–¥—ë–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            await state.update_data(title=message.text)
            # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.set_state(st.AddOrder.description)
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞',
                                 reply_markup=kb.cancel)
    except Exception:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


@client.message(st.AddOrder.description)
async def sure_add_order(message: Message, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        if len(message.text) > 10000:
            await message.answer('–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª–µ–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤',
                                 reply_markup=kb.cancel)
        else:
            # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –Ω—É–∂–Ω–æ–µ –Ω–∞–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–µ–¥—ë–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            await state.update_data(description=message.text)
            # –±–µ—Ä—ë–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
            tdata = await state.get_data()
            # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.set_state(st.AddOrder.sure)
            await message.answer(f'–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏?\n\n'
                                 f'<b>–ù–∞–∑–≤–∞–Ω–∏–µ</b>: {tdata['title']}\n'
                                 f'<b>–û–ø–∏—Å–∞–Ω–∏–µ</b>:\n{tdata['description']}',
                                 reply_markup=kb.sure)
    except Exception:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


@client.message(F.text == 'üåü –î–∞', st.AddOrder.sure)
async def ok_add_order(message: Message, bot: Bot, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        # –±–µ—Ä—ë–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
        tdata = await state.get_data()
        # –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –≤ –ë–î
        order = await db.add_order(message.from_user.id ,tdata['title'], tdata['description'])
        await bot.send_message(chat_id=ADMIN_ORDER_CHAT_ID, text=f'‚ÄºÔ∏è –í–ù–ò–ú–ê–ù–ò–ï ‚ÄºÔ∏è\n\n'
                                                                 f'<b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑:</b>\n'
                                                                 f'<b>TG_ID –∑–∞–∫–∞–∑—á–∏–∫–∞:</b> {message.from_user.id}\n'
                                                                 f'<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {tdata['title']}\n'
                                                                 f'<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{tdata['description']}\n',
                               reply_markup=await kb.order_moderation(order.id))
        orders = await db.client_orders(message.from_user.id)
        await message.answer('‚ÄºÔ∏è –í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é')
        if not orders:
            # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.set_state(st.ClientOrder.list)
            await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞',
                                 reply_markup=kb.create_and_back)
        else:
            total_pages = (len(orders) + 5 - 1) // 5  # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
            # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.set_state(st.ClientOrder.total_pages)
            await state.update_data(total_pages=total_pages)
            # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.set_state(st.ClientOrder.list)
            orders = await db.client_orders_pagination(message.from_user.id, 1)
            await message.answer(f'<b>–°—Ç—Ä–∞–Ω–∏—Ü–∞ 1 –∏–∑ {total_pages}</b>',
                                 reply_markup=await kb.client_orders(orders, 1, total_pages))
            await message.answer('–ú–µ–Ω—é üëá',
                                 reply_markup=kb.create_and_back)
    except Exception:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


"""--------------------------------–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞---------------------------------------------"""

@client.message(F.text == '‚úçÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑', st.ClientOrder.order)
async def client_order_edit_title(message: Message, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(st.EditOrder.title)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ (–¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤)',
                             reply_markup=kb.cancel)
    except Exception:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


@client.message(F.text == '‚ùå –û—Ç–º–µ–Ω–∞', st.DeleteOrder.sure)
@client.message(F.text == '‚ùå –û—Ç–º–µ–Ω–∞', st.EditOrder.sure)
@client.message(F.text == '‚ùå –û—Ç–º–µ–Ω–∞', st.EditOrder.description)
@client.message(F.text == '‚ùå –û—Ç–º–µ–Ω–∞', st.EditOrder.title)
async def  cancel_client_order_edit(message: Message, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(st.ClientOrder.order)
        tdata = await state.get_data()
        # –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ callback id –∑–∞–ø—Ä–æ—Å–∞
        order_info = await db.get_order(tdata['order'])
        await message.answer('–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞ üîπ')
        await message.answer(f'<b>–ù–∞–∑–≤–∞–Ω–∏–µ</b>: {order_info.title}\n'
                                      f'<b>–û–ø–∏—Å–∞–Ω–∏–µ</b>:\n{order_info.description}',
                                      reply_markup=kb.client_order_menu)
    except Exception:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


@client.message(st.EditOrder.title)
async def client_order_edit_description(message: Message, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        if len(message.text) > 50:
            await message.answer('–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª–µ–µ 50 —Å–∏–º–≤–æ–ª–æ–≤',
                                 reply_markup=kb.cancel)
        else:
            # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –Ω—É–∂–Ω–æ–µ –Ω–∞–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–µ–¥—ë–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            await state.update_data(title=message.text)
            # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.set_state(st.EditOrder.description)
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞',
                                 reply_markup=kb.cancel)
    except Exception:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


@client.message(st.EditOrder.description)
async def sure_client_order_edit(message: Message, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        if len(message.text) > 10000:
            await message.answer('–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª–µ–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤',
                                 reply_markup=kb.cancel)
        else:
            # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –Ω—É–∂–Ω–æ–µ –Ω–∞–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–µ–¥—ë–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            await state.update_data(description=message.text)
            # –±–µ—Ä—ë–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
            tdata = await state.get_data()
            # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.set_state(st.EditOrder.sure)
            await message.answer(f'–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ?\n\n'
                                 f'<b>–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ</b>: {tdata['title']}\n'
                                 f'<b>–ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ</b>:\n{tdata['description']}',
                                 reply_markup=kb.sure)
    except Exception:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


@client.message(F.text == 'üåü –î–∞', st.EditOrder.sure)
async def ok_edit_order(message: Message, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        # –±–µ—Ä—ë–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
        tdata = await state.get_data()
        # –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –≤ –ë–î
        await db.edit_order(tdata['order'] ,tdata['title'], tdata['description'])
        # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(st.ClientOrder.order)
        tdata = await state.get_data()
        # –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ callback id –∑–∞–ø—Ä–æ—Å–∞
        order_info = await db.get_order(tdata['order'])
        await message.answer('–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞ üîπ')
        await message.answer(f'<b>–ù–∞–∑–≤–∞–Ω–∏–µ</b>: {order_info.title}\n'
                             f'<b>–û–ø–∏—Å–∞–Ω–∏–µ</b>:\n{order_info.description}',
                             reply_markup=kb.client_order_menu)
    except Exception:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


"""--------------------------------–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞---------------------------------------------"""
@client.message(F.text == '‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑', st.ClientOrder.order)
async def client_order_delete(message: Message, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(st.DeleteOrder.sure)
        await message.answer('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑?',
                             reply_markup=kb.sure)
    except Exception:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


@client.message(F.text == 'üåü –î–∞', st.DeleteOrder.sure)
async def ok_delete_order(message: Message, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        # –±–µ—Ä—ë–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
        tdata = await state.get_data()
        # –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –≤ –ë–î
        await db.delete_order(tdata['order'])
        orders = await db.client_orders(message.from_user.id)
        if not orders:
            # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.set_state(st.ClientOrder.list)
            await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞',
                                 reply_markup=kb.create_and_back)
        else:
            total_pages = (len(orders) + 5 - 1) // 5  # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
            # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.set_state(st.ClientOrder.total_pages)
            await state.update_data(total_pages=total_pages)
            # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.set_state(st.ClientOrder.list)
            orders = await db.client_orders_pagination(message.from_user.id, 1)
            await message.answer(f'<b>–°—Ç—Ä–∞–Ω–∏—Ü–∞ 1 –∏–∑ {total_pages}</b>',
                                 reply_markup=await kb.client_orders(orders, 1, total_pages))
            await message.answer('–ú–µ–Ω—é üëá',
                                 reply_markup=kb.create_and_back)
    except Exception:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


"""

–î–µ–π—Å—Ç–≤–∏—è –≤ —Ä–∞–∑–¥–µ–ª–µ "–û—Ç–∫–ª–∏–∫–∏"
----------------------------------------------------------------------------------------------
"""
@client.message(F.text == 'üí• –û—Ç–∫–ª–∏–∫–∏', st.ClientMenu.menu)
async def client_response_list(message: Message, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        orders = await db.client_available_orders(message.from_user.id)
        if not orders:
            # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.set_state(st.ClientResponse.list)
            await message.answer('–ù—É–∂–µ–Ω —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑',
                                 reply_markup=kb.create_and_back)
        else:
            # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.set_state(st.ClientResponse.list)

            total_pages = (len(orders) + 5 - 1) // 5  # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
            await state.update_data(total_order_pages=total_pages)
            await state.update_data(orders_page=1)
            orders = await db.client_available_orders_pagination(message.from_user.id, 1)
            await message.answer(f'<b>–°—Ç—Ä–∞–Ω–∏—Ü–∞ 1 –∏–∑ {total_pages}</b>',
                                 reply_markup=await kb.order_total_response_pagination(orders, 1, total_pages))
            await message.answer('–ú–µ–Ω—é üëá',
                             reply_markup=kb.back)
    except Exception:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


@client.callback_query(F.data.startswith('prev-responses-for-order_'), st.ClientResponse.list)
@client.callback_query(F.data.startswith('next-responses-for-order_'), st.ClientResponse.list)
async def responses_for_order_pagination(callback: CallbackQuery, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        await callback.answer('')
        page = int(callback.data.split('_')[1])
        await state.update_data(orders_page=page)
        orders = await db.client_available_orders_pagination(callback.from_user.id, page)
        tdata = await state.get_data()
        total_pages = tdata['total_order_pages']
        await callback.message.edit_text(f'<b>–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}</b>',
                             reply_markup=await kb.order_total_response_pagination(orders, page, total_pages))
    except Exception:
        await callback.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


@client.callback_query(F.data == 'no_responses', st.ClientResponse.list)
async def no_responses(callback: CallbackQuery):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        # –æ—Ç–≤–µ—Ç –Ω–∞ callback
        await callback.answer('–ù–µ—Ç –æ—Ç–∫–ª–∏–∫–æ–≤')
    except Exception:
        await callback.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                                      '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


@client.callback_query(F.data.startswith('total-order-responses_'), st.ClientResponse.list)
async def client_responses_for_order(callback: CallbackQuery, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        # –æ—Ç–≤–µ—Ç –Ω–∞ callback
        await callback.answer('')
        # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(st.ClientResponse.order_responses)
        responses = await db.client_responses(callback.data.split('_')[1])

        total_pages = (len(responses) + 5 - 1) // 5  # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
        await state.update_data(total_pages=total_pages)
        await state.update_data(page=1)
        await state.update_data(select_order=callback.data.split('_')[1])
        responses = await db.client_responses_pagination(callback.data.split('_')[1], 1)
        order = await db.get_order(callback.data.split('_')[1])
        await callback.message.edit_text(f'–û—Ç–∫–ª–∏–∫–∏ –¥–ª—è –∑–∞–∫–∞–∑–∞ <b>{order.title}</b>\n'
                             f'<b>–°—Ç—Ä–∞–Ω–∏—Ü–∞ 1 –∏–∑ {total_pages}</b>',
                             reply_markup=await kb.client_responses_for_order_pagination(responses, 1, total_pages))
    except Exception:
        await callback.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                                      '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


@client.callback_query(F.data.startswith('prev-client-response-info_'), st.ClientResponse.order_responses)
@client.callback_query(F.data.startswith('next-client-response-info_'), st.ClientResponse.order_responses)
async def client_response_info_pagination(callback: CallbackQuery, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        await callback.answer('')
        page = int(callback.data.split('_')[1])
        await state.update_data(page=page)
        tdata = await state.get_data()
        order_id = tdata['select_order']
        responses = await db.client_responses_pagination(order_id, page)
        total_pages = tdata['total_pages']
        order = await db.get_order(order_id)
        await callback.message.edit_text(f'–û—Ç–∫–ª–∏–∫–∏ –¥–ª—è –∑–∞–∫–∞–∑–∞ <b>{order.title}</b>\n'
                                         f'<b>–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}</b>',
                                         reply_markup=await kb.client_responses_for_order_pagination(responses, page,
                                                                                                     total_pages))
    except Exception:
        await callback.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


@client.callback_query(F.data == 'back_to_total_order_responses', st.ClientResponse.order_responses)
async def back_to_total_order_responses(callback: CallbackQuery, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        # –æ—Ç–≤–µ—Ç –Ω–∞ callback
        await callback.answer('')
        # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(st.ClientResponse.list)
        tdata = await state.get_data()
        page = tdata['orders_page']
        total_pages = tdata['total_order_pages']
        orders = await db.client_available_orders_pagination(callback.from_user.id, page)
        await callback.message.edit_text(f'<b>–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}</b>',
                             reply_markup=await kb.order_total_response_pagination(orders, page, total_pages))
    except Exception:
        await callback.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                                      '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


@client.callback_query(F.data.startswith('back_'), st.ClientResponse.feedbacks_about_developer)
@client.callback_query(F.data.startswith('client-response-info_'), st.ClientResponse.order_responses)
async def client_response_info(callback: CallbackQuery, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        # –æ—Ç–≤–µ—Ç –Ω–∞ callback
        await callback.answer('')
        await state.update_data(object_id=callback.data.split('_')[1])
        # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(st.ClientResponse.response_info)
        response = await db.get_response(callback.data.split('_')[1])
        await callback.message.edit_text(f'<b>–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:</b> @{response.developer_rel.username}\n'
                                      f'<b>–†–µ–π—Ç–∏–Ω–≥:</b> {response.developer_rel.rating if response.developer_rel.rating > 0 else '–ù–µ—Ç –æ—Ü–µ–Ω–æ–∫'}\n'
                                      f'<b>–û—Ç–∫–ª–∏–∫:</b> {response.description}',
                                      reply_markup=await kb.client_response_menu(response.developer_rel.username, response))
    except Exception:
        await callback.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                                      '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


@client.callback_query(F.data == 'hide_client_response_info', st.ClientResponse.response_info)
async def hide_client_response_info(callback: CallbackQuery, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        # –æ—Ç–≤–µ—Ç –Ω–∞ callback
        await callback.answer('')
        await state.set_state(st.ClientResponse.order_responses)
        tdata = await state.get_data()
        order = tdata['select_order']
        page = tdata['page']
        total_pages = tdata['total_pages']
        responses = await db.client_responses_pagination(order, page)
        order = await db.get_order(order)
        await callback.message.edit_text(f'–û—Ç–∫–ª–∏–∫–∏ –¥–ª—è –∑–∞–∫–∞–∑–∞ <b>{order.title}</b>\n'
                                         f'<b>–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}</b>',
                                         reply_markup=await kb.client_responses_for_order_pagination(responses, page,
                                                                                                     total_pages))
    except Exception:
        await callback.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                                      '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


@client.callback_query(F.data.startswith('the-last-feedbacks-about-developer_'), st.ClientResponse.response_info)
async def the_last_feedbacks_about_developer(callback: CallbackQuery, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        tdata = await state.get_data()
        await state.set_state(st.ClientResponse.feedbacks_about_developer)
        await callback.answer('')
        feedbacks = await db.last_feedbacks_about_developer(callback.data.split('_')[1])
        text = '\n'.join(f'<b>–û—Ü–µ–Ω–∫–∞:</b> {feedback.mark_for_developer}\n'
                         f'<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {feedback.feedback_about_developer}\n' for feedback in feedbacks)
        await callback.message.edit_text(f'{text}',
                                         reply_markup=await kb.backs(tdata['object_id']))
    except Exception:
        await callback.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


"""--------------------------------–û—Ç–∫–∞–∑ –æ—Ç–∫–ª–∏–∫–∞ –∏ –≤—ã–±–æ—Ä –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è---------------------------------------------"""
@client.callback_query(F.data.startswith('refusal-response_'), st.ClientResponse.response_info)
async def refusal_response(callback: CallbackQuery, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        # –æ—Ç–≤–µ—Ç –Ω–∞ callback
        await callback.answer('')
        await db.refuse_response(callback.data.split('_')[1])
        await state.set_state(st.ClientResponse.order_responses)
        if not await db.is_available_response_for_order(callback.data.split('_')[1]):
            await callback.message.edit_text('–î–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ –±–æ–ª—å—à–µ –Ω–µ—Ç –æ—Ç–∫–ª–∏–∫–æ–≤',
                                             reply_markup=await kb.back_to_total_order_responses())
        else:
            tdata = await state.get_data()
            order_id = tdata['select_order']
            responses = await db.client_responses(order_id)
            total_pages = (len(responses) + 5 - 1) // 5  # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
            await state.update_data(total_pages=total_pages)
            responses = await db.client_responses_pagination(order_id, 1)
            order = await db.get_order(order_id)
            await callback.message.edit_text(f'–û—Ç–∫–ª–∏–∫–∏ –¥–ª—è –∑–∞–∫–∞–∑–∞ <b>{order.title}</b>\n'
                                         f'<b>–°—Ç—Ä–∞–Ω–∏—Ü–∞ 1 –∏–∑ {total_pages}</b>',
                                         reply_markup=await kb.client_responses_for_order_pagination(responses, 1,
                                                                                                     total_pages))
    except Exception:
        await callback.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                                      '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


@client.callback_query(F.data.startswith('choose-response_'), st.ClientResponse.response_info)
async def choose_response(callback: CallbackQuery, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        # –æ—Ç–≤–µ—Ç –Ω–∞ callback
        await callback.answer('')
        # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(st.ClientResponse.sure_complete_order)
        response = await db.get_response(callback.data.split('_')[1])
        await callback.message.edit_text(f'‚ÄºÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –∑–∞–∫–∞–∑ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ @{response.developer_rel.username}',
                                      reply_markup=await kb.sure_complete_order(callback.data.split('_')[1]))
    except Exception:
        await callback.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                                      '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


@client.callback_query(F.data.startswith('cancel-order-complete_'), st.ClientResponse.sure_complete_order)
async def cancel_order_complete(callback: CallbackQuery, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        # –æ—Ç–≤–µ—Ç –Ω–∞ callback
        await callback.answer('')
        # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(st.ClientResponse.response_info)
        response = await db.get_response(callback.data.split('_')[1])
        await callback.message.edit_text(f'<b>–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:</b> @{response.developer_rel.username}\n'
                                         f'<b>–†–µ–π—Ç–∏–Ω–≥:</b> {response.developer_rel.rating if response.developer_rel.rating > 0 else '–ù–µ—Ç –æ—Ü–µ–Ω–æ–∫'}\n'
                                         f'<b>–û—Ç–∫–ª–∏–∫:</b> {response.description}',
                                         reply_markup=await kb.client_response_menu(response.developer_rel.username, response))
    except Exception:
        await callback.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                                      '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


@client.callback_query(F.data.startswith('order-complete_'), st.ClientResponse.sure_complete_order)
async def order_complete(callback: CallbackQuery, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    #try:
        # –æ—Ç–≤–µ—Ç –Ω–∞ callback
        await callback.answer('')
        await db.order_complete(callback.data.split('_')[1])
        await state.clear()
        # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(st.ClientMenu.menu)
        await callback.message.answer('–ó–∞–∫–∞–∑ –¥–æ–±–∞–≤–ª–µ–Ω –≤ "–ò—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–æ–≤"', reply_markup=kb.client_main)
    #except Exception:
        #await callback.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                                      #'–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


"""

–î–µ–π—Å—Ç–≤–∏—è –≤ —Ä–∞–∑–¥–µ–ª–µ "–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤"
----------------------------------------------------------------------------------------------
"""
@client.message(F.text == '‚ùå –û—Ç–º–µ–Ω–∞', st.ClientCreateFeedback.sure)
@client.message(F.text == '‚ùå –û—Ç–º–µ–Ω–∞', st.ClientCreateFeedback.feedback)
@client.message(F.text == '‚ùå –û—Ç–º–µ–Ω–∞', st.ClientCreateFeedback.mark)
@client.message(F.text == '‚è≥ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤', st.ClientMenu.menu)
async def order_history(message: Message, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        orders = await db.order_history(message.from_user.id)
        if not orders:
            # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.set_state(st.OrderHistory.list)
            await message.answer('–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤',
                                 reply_markup=kb.back)
        else:
            total_pages = (len(orders) + 5 - 1) // 5  # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
            await state.update_data(total_pages=total_pages)
            await state.update_data(page=1)
            # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.set_state(st.OrderHistory.list)
            orders = await db.order_history_pagination(message.from_user.id ,1)
            await message.answer(f'<b>–°—Ç—Ä–∞–Ω–∏—Ü–∞ 1 –∏–∑ {total_pages}</b>',
                                 reply_markup=await kb.client_history_orders(orders, 1, total_pages))
        await message.answer('–ú–µ–Ω—é üëá',
                             reply_markup=kb.back)
    except Exception:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


@client.callback_query(F.data.startswith('prev-client-history-order_'), st.OrderHistory.list)
@client.callback_query(F.data.startswith('next-client-history-order_'), st.OrderHistory.list)
async def client_history_order_pagination(callback: CallbackQuery, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        await callback.answer('')
        page = int(callback.data.split('_')[1])
        await state.update_data(page=page)
        orders = await db.order_history_pagination(callback.from_user.id ,page)
        tdata = await state.get_data()
        total_pages = tdata['total_pages']
        await callback.message.edit_text(f'<b>–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}</b>',
                             reply_markup=await kb.client_history_orders(orders, page, total_pages))
    except Exception:
        await callback.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


@client.callback_query(F.data.startswith('history-order_'), st.OrderHistory.list)
async def history_order(callback: CallbackQuery, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        # –æ—Ç–≤–µ—Ç –Ω–∞ callback
        await callback.answer('–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞')
        # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(st.OrderHistory.order_info)
        # –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ callback id –∑–∞–ø—Ä–æ—Å–∞
        order_info = await db.get_completed_order(callback.data.split('_')[1])
        await callback.message.edit_text(f'<b>–ó–∞–∫–∞–∑</b>: {order_info.title}\n'
                                         f'<b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å</b>: @{order_info.developer_rel.username}\n\n'
                                         f'<b>–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞:</b>  {order_info.mark_for_developer 
                                         if order_info.mark_for_developer else '–ù–µ –æ—Ü–µ–Ω–µ–Ω–æ'}\n'
                                         f'<b>–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {order_info.feedback_about_developer 
                                         if order_info.feedback_about_developer else '–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'}\n\n'
                                         f'<b>–û—Ü–µ–Ω–∫–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:</b>  {order_info.mark_for_client 
                                         if order_info.mark_for_client else '–ù–µ –æ—Ü–µ–Ω–µ–Ω–æ'}\n'
                                         f'<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:</b> {order_info.feedback_about_client 
                                         if order_info.feedback_about_client else '–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'}\n\n'
                                         f'<b>–î–∞—Ç–∞</b>: {order_info.date.strftime('%d.%m.%Y')}\n\n',
                                         reply_markup=await kb.history_order_info(order_info))
    except Exception:
        await callback.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


@client.callback_query(F.data == 'hide_history_order_info', st.OrderHistory.order_info)
async def hide_history_order_info(callback: CallbackQuery, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        # –æ—Ç–≤–µ—Ç –Ω–∞ callback
        await callback.answer('')
        await state.set_state(st.OrderHistory.list)
        tdata = await state.get_data()
        page = tdata['page']
        total_pages = tdata['total_pages']
        orders = await db.order_history_pagination(callback.from_user.id, page)
        await callback.message.edit_text(f'<b>–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}</b>',
                             reply_markup=await kb.client_history_orders(orders, page, total_pages))
    except Exception:
        await callback.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                                      '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


"""--------------------------------–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞---------------------------------------------"""
@client.callback_query(F.data.startswith('client-create-feedback_'), st.OrderHistory.order_info)
async def client_create_feedback_mark(callback: CallbackQuery, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        # –æ—Ç–≤–µ—Ç –Ω–∞ callback
        await callback.answer('')
        await state.update_data(select_order=callback.data.split('_')[1])
        # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(st.ClientCreateFeedback.mark)
        await callback.message.answer('–û—Ü–µ–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è (–æ—Ç 1 –¥–æ 5)', reply_markup=kb.cancel)
    except Exception:
        await callback.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                                      '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


@client.message(st.ClientCreateFeedback.mark)
async def client_create_feedback_feedback(message: Message, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        if message.text not in ['1', '2', '3', '4', '5']:
            await message.answer('–í–≤–µ–¥—ë–Ω–Ω–æ–µ –≤–∞–º–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n'
                                 '–û—Ü–µ–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è (–æ—Ç 1 –¥–æ 5)')
        else:
            # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –Ω—É–∂–Ω–æ–µ –Ω–∞–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–µ–¥—ë–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            await state.update_data(mark=message.text)
            # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.set_state(st.ClientCreateFeedback.feedback)
            await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –æ—Ç–∑—ã–≤ (–¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤)')
    except Exception:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


@client.message(st.ClientCreateFeedback.feedback)
async def sure_client_create_feedback(message: Message, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        if len(message.text) > 10000:
            await message.answer('–û—Ç–∑—ã–≤ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª–µ–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤')
        else:
            # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –Ω—É–∂–Ω–æ–µ –Ω–∞–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–µ–¥—ë–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            await state.update_data(feedback=message.text)
            # –±–µ—Ä—ë–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
            tdata = await state.get_data()
            # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.set_state(st.ClientCreateFeedback.sure)
            order = await db.get_completed_order(tdata['select_order'])
            await message.answer(f'–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –æ—Ç–∑—ã–≤?\n\n'
                                 f'<b>–ó–∞–∫–∞–∑:</b> {order.title}\n'
                                 f'<b>–û—Ü–µ–Ω–∫–∞:</b> {tdata['mark']}\n'
                                 f'<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {tdata['feedback']}',
                                 reply_markup=kb.sure)
    except Exception:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


@client.message(F.text == 'üåü –î–∞', st.ClientCreateFeedback.sure)
async def ok_client_create_feedback(message: Message, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        # –±–µ—Ä—ë–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
        tdata = await state.get_data()
        order = await db.get_completed_order(tdata['select_order'])
        total_feedbacks_about_developer = await db.feedbacks_about_developer(order.developer)
        mark_sum_about_developer = sum(feedback.mark_for_developer for feedback in total_feedbacks_about_developer)
        total_feedbacks_about_developer = len(total_feedbacks_about_developer)
        # –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ—Ç–∑—ã–≤ –≤ –ë–î
        await db.add_client_feedback(tdata['select_order'], tdata['mark'],
                                     tdata['feedback'], total_feedbacks_about_developer, mark_sum_about_developer)
        orders = await db.order_history(message.from_user.id)
        total_pages = (len(orders) + 5 - 1) // 5  # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
        await state.update_data(total_pages=total_pages)
        await state.update_data(page=1)
        # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(st.OrderHistory.list)
        orders = await db.order_history_pagination(message.from_user.id, 1)
        await message.answer(f'<b>–°—Ç—Ä–∞–Ω–∏—Ü–∞ 1 –∏–∑ {total_pages}</b>',
                             reply_markup=await kb.client_history_orders(orders, 1, total_pages))
        await message.answer('–ú–µ–Ω—é üëá',
                            reply_markup=kb.back)
    except Exception:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


"""--------------------------------–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞---------------------------------------------"""
@client.callback_query(F.data.startswith('client-edit-feedback_'), st.OrderHistory.order_info)
async def client_edit_feedback_mark(callback: CallbackQuery, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        # –æ—Ç–≤–µ—Ç –Ω–∞ callback
        await callback.answer('')
        await state.update_data(select_order=callback.data.split('_')[1])
        # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(st.ClientEditFeedback.mark)
        await callback.message.answer('–ù–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ (–æ—Ç 1 –¥–æ 5)', reply_markup=kb.cancel)
    except Exception:
        await callback.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                                      '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


@client.message(st.ClientEditFeedback.mark)
async def client_edit_feedback_feedback(message: Message, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        if message.text not in ['1', '2', '3', '4', '5']:
            await message.answer('–í–≤–µ–¥—ë–Ω–Ω–æ–µ –≤–∞–º–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n'
                                 '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –æ—Ü–µ–Ω–∫—É (–æ—Ç 1 –¥–æ 5)')
        else:
            # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –Ω—É–∂–Ω–æ–µ –Ω–∞–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–µ–¥—ë–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            await state.update_data(mark=message.text)
            # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.set_state(st.ClientEditFeedback.feedback)
            await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—ã–π –æ—Ç–∑—ã–≤ (–¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤)')
    except Exception:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


@client.message(st.ClientEditFeedback.feedback)
async def sure_client_edit_feedback(message: Message, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        if len(message.text) > 10000:
            await message.answer('–û—Ç–∑—ã–≤ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª–µ–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤')
        else:
            # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –Ω—É–∂–Ω–æ–µ –Ω–∞–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–µ–¥—ë–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            await state.update_data(feedback=message.text)
            # –±–µ—Ä—ë–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
            tdata = await state.get_data()
            # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.set_state(st.ClientEditFeedback.sure)
            order = await db.get_completed_order(tdata['select_order'])
            await message.answer(f'–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–Ω–µ—Å—Ç–∏ —Å–ª–µ–¥—É—é—â–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –æ—Ç–∑—ã–≤?\n\n'
                                 f'<b>–ó–∞–∫–∞–∑:</b> {order.title}\n'
                                 f'<b>–û—Ü–µ–Ω–∫–∞:</b> {tdata['mark']}\n'
                                 f'<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {tdata['feedback']}',
                                 reply_markup=kb.sure)
    except Exception:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


@client.message(F.text == 'üåü –î–∞', st.ClientEditFeedback.sure)
async def ok_client_edit_feedback(message: Message, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        # –±–µ—Ä—ë–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
        tdata = await state.get_data()
        order = await db.get_completed_order(tdata['select_order'])
        total_feedbacks_about_developer = await db.feedbacks_about_developer(order.developer)
        mark_sum_about_developer = sum(feedback.mark_for_developer for feedback in total_feedbacks_about_developer)
        total_feedbacks_about_developer = len(total_feedbacks_about_developer)
        # –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ—Ç–∑—ã–≤ –≤ –ë–î
        await db.edit_client_feedback(tdata['select_order'], tdata['mark'],
                                     tdata['feedback'], total_feedbacks_about_developer, mark_sum_about_developer)
        orders = await db.order_history(message.from_user.id)
        total_pages = (len(orders) + 5 - 1) // 5  # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
        await state.update_data(total_pages=total_pages)
        await state.update_data(page=1)
        # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(st.OrderHistory.list)
        orders = await db.order_history_pagination(message.from_user.id, 1)
        await message.answer(f'<b>–°—Ç—Ä–∞–Ω–∏—Ü–∞ 1 –∏–∑ {total_pages}</b>',
                             reply_markup=await kb.client_history_orders(orders, 1, total_pages))
        await message.answer('–ú–µ–Ω—é üëá',
                            reply_markup=kb.back)
    except Exception:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


"""

–î–µ–π—Å—Ç–≤–∏—è –≤ —Ä–∞–∑–¥–µ–ª–µ "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"
----------------------------------------------------------------------------------------------
"""
@client.message(F.text == 'üòÅ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', st.ClientMenu.menu)
async def client_profile(message: Message, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(st.ClientProfile.profile)
        client_info = await db.get_client(message.from_user.id)
        await message.answer(f'<b>–†–µ–π—Ç–∏–Ω–≥:</b> {client_info.rating if client_info.rating > 0 else '–ù–µ—Ç –æ—Ü–µ–Ω–æ–∫'}\n'
                             f'<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤:</b> {client_info.completed_orders}\n',
                                 reply_markup= kb.back)
    except Exception:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


"""

–î–µ–π—Å—Ç–≤–∏—è –≤ —Ä–∞–∑–¥–µ–ª–µ "FAQ"
----------------------------------------------------------------------------------------------
"""
@client.message(F.text == 'üíé FAQ', st.ClientMenu.menu)
async def client_faq(message: Message, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(st.FAQ.client)
        await message.answer('–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã üëá \n https://telegra.ph/',
                                 reply_markup=kb.back)
    except Exception:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


"""

–ß—Ç–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∑–∞–∫—Ä—ã—Ç–æ–≥–æ —á–∞—Ç–∞ (–º–æ–¥–µ—Ä–∞—Ü–∏—è)
----------------------------------------------------------------------------------------------

"""


@client.callback_query(lambda callback: callback.message.chat.id == ADMIN_ORDER_CHAT_ID, F.data.startswith('moderation-passed_'))  # —Ö—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–æ–≥–¥–∞, –∫–æ–≥–¥–∞ –≤ –Ω—É–∂–Ω—ã–π —á–∞—Ç –ø—Ä–∏—Å—ã–ª–∞–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ
async def moderation_passed(callback: CallbackQuery, bot: Bot):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    #try:
        # –æ—Ç–≤–µ—Ç –Ω–∞ callback
        await callback.answer('–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–∞–±–æ—Ç—É')
        await callback.message.delete()
        # –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ callback id –∑–∞–ø—Ä–æ—Å–∞
        order = await db.available_order(callback.data.split('_')[1])
        await bot.send_message(chat_id=order.client, text='<b>‚ÄºÔ∏è –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–æ—à—ë–ª –º–æ–¥–µ—Ä–∞—Ü–∏—é</b>')
    #except Exception:
        #await callback.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             #'–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


@client.callback_query(lambda callback: callback.message.chat.id == ADMIN_ORDER_CHAT_ID, F.data.startswith('moderation-failed_'))  # —Ö—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–æ–≥–¥–∞, –∫–æ–≥–¥–∞ –≤ –Ω—É–∂–Ω—ã–π —á–∞—Ç –ø—Ä–∏—Å—ã–ª–∞–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ
async def moderation_failed(callback: CallbackQuery, bot: Bot):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    #try:
        # –æ—Ç–≤–µ—Ç –Ω–∞ callback
        await callback.answer('–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–∞–±–æ—Ç—É')
        await callback.message.delete()
        # –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ callback id –∑–∞–ø—Ä–æ—Å–∞
        order = await db.delete_order(callback.data.split('_')[1])
        await bot.send_message(chat_id=order.client, text='<b>‚ÄºÔ∏è –í–∞—à –∑–∞–∫–∞–∑ –Ω–µ –ø—Ä–æ—à—ë–ª –º–æ–¥–µ—Ä–∞—Ü–∏—é</b>')
    #except Exception:
        #await callback.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             #'–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')