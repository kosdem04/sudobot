
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext

import app.database.requests as db
import app.states as st
import app.keyboards as kb

from config import ADMIN_ORDER_CHAT_ID

client = Router()


@client.message(F.text == '‚óÄÔ∏è –ù–∞–∑–∞–¥', st.Register.role)
@client.message(F.text == '‚óÄÔ∏è –ù–∞–∑–∞–¥', st.Register.moderation)
@client.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        if await db.is_client(message.from_user.id):
            await state.clear()
            # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.set_state(st.ClientMenu.menu)
            await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=kb.client_main)
        elif await db.is_developer(message.from_user.id):
                await state.clear()
                # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                await state.set_state(st.DeveloperMenu.menu)
                await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=kb.developer_main)
        else:
            await state.set_state(st.Register.role)
            await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç!\n'
                                 '–í—ã–±–µ—Ä–µ—Ç–µ –≤–∞—à—É —Ä–æ–ª—å üëá', reply_markup=await kb.select_role())
    except Exception:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


@client.callback_query(F.data == 'client', st.Register.role)
async def client_after_register_menu(callback: CallbackQuery, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        await state.clear()
        # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(st.ClientMenu.menu)
        await callback.answer('')
        # –¥–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –≤ –ë–î
        await db.add_client(callback.from_user.id)
        await callback.message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=kb.client_main)
    except Exception:
        await callback.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


@client.message(F.text == '‚óÄÔ∏è –ù–∞–∑–∞–¥', st.ClientResponse.list)
@client.message(F.text == 'üîπ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', st.ClientOrder.order)
@client.message(F.text == '‚óÄÔ∏è –ù–∞–∑–∞–¥', st.ClientOrder.list)
@client.message(F.text == '‚óÄÔ∏è –ù–∞–∑–∞–¥', st.FAQ.client)
async def client_main_menu(message: Message, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        await state.clear()
        # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(st.ClientMenu.menu)
        await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=kb.client_main)
    except Exception:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


@client.message(F.text == 'üòÅ –°—Ç–∞—Ç—å –∑–∞–∫–∞–∑—á–∏–∫–æ–º', st.DeveloperMenu.menu)
async def become_client(message: Message, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        if await db.is_client(message.from_user.id):
            await state.clear()
            # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.set_state(st.ClientMenu.menu)
            await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=kb.client_main)
        else:
            # –¥–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –≤ –ë–î
            await db.add_client(message.from_user.id)
            await state.clear()
            # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.set_state(st.ClientMenu.menu)
            await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=kb.client_main)
    except Exception:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')




"""

–î–µ–π—Å—Ç–≤–∏—è –≤ —Ä–∞–∑–¥–µ–ª–µ "–ú–æ–∏ –∑–∞–∫–∞–∑—ã"
----------------------------------------------------------------------------------------------
"""


@client.message(F.text == '‚ùå –û—Ç–º–µ–Ω–∞', st.AddOrder.sure)
@client.message(F.text == '‚ùå –û—Ç–º–µ–Ω–∞', st.AddOrder.description)
@client.message(F.text == '‚ùå –û—Ç–º–µ–Ω–∞', st.AddOrder.title)
@client.message(F.text == '‚óÄÔ∏è –ù–∞–∑–∞–¥', st.ClientOrder.order)
@client.message(F.text == 'üîπ –ú–æ–∏ –∑–∞–∫–∞–∑—ã', st.ClientMenu.menu)
async def client_order_list(message: Message, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(st.ClientOrder.list)
        orders = await db.client_orders(message.from_user.id)
        if not orders:
            await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞',
                                 reply_markup=kb.create_and_back)
        else:
            await message.answer('–í–∞—à–∏ –∑–∞–∫–∞–∑—ã',
                                 reply_markup= await kb.client_orders(orders))
            await message.answer('–ú–µ–Ω—é üëá',
                                 reply_markup=kb.create_and_back)
    except Exception:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


@client.callback_query(F.data.startswith('order_'), st.ClientOrder.list)
async def client_order_info(callback: Message, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        # –æ—Ç–≤–µ—Ç –Ω–∞ callback
        await callback.answer('–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞')
        # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(st.ClientOrder.order)
        # –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ callback id –∑–∞–ø—Ä–æ—Å–∞
        order_info = await db.get_order(callback.data.split('_')[1])
        # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –Ω—É–∂–Ω–æ–µ –Ω–∞–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–µ–¥—ë–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        await state.update_data(order=callback.data.split('_')[1])
        await callback.message.answer('–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞ üîπ')
        await callback.message.answer(f'<b>–ù–∞–∑–≤–∞–Ω–∏–µ</b>: {order_info.title}\n'
                             f'<b>–û–ø–∏—Å–∞–Ω–∏–µ</b>:\n{order_info.description}',
                             reply_markup=kb.client_order_menu)
    except Exception:
        await callback.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                                      '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @kosdem04')


"""-------------------------------------------–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑---------------------------------------------------"""
@client.message(F.text == '‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑', st.ClientOrder.list)
async def order_title(message: Message, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(st.AddOrder.title)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ (–¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤)',
                             reply_markup=kb.cancel)
    except Exception:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


@client.message(st.AddOrder.title)
async def order_description(message: Message, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        if len(message.text) > 50:
            await message.answer('–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª–µ–µ 50 —Å–∏–º–≤–æ–ª–æ–≤',
                                 reply_markup=kb.cancel)
        else:
            # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –Ω—É–∂–Ω–æ–µ –Ω–∞–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–µ–¥—ë–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            await state.update_data(title=message.text)
            # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.set_state(st.AddOrder.description)
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞',
                                 reply_markup=kb.cancel)
    except Exception:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


@client.message(st.AddOrder.description)
async def sure_add_order(message: Message, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        if len(message.text) > 10000:
            await message.answer('–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª–µ–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤',
                                 reply_markup=kb.cancel)
        else:
            # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –Ω—É–∂–Ω–æ–µ –Ω–∞–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–µ–¥—ë–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            await state.update_data(description=message.text)
            # –±–µ—Ä—ë–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
            tdata = await state.get_data()
            # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.set_state(st.AddOrder.sure)
            await message.answer(f'–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏?\n\n'
                                 f'<b>–ù–∞–∑–≤–∞–Ω–∏–µ</b>: {tdata['title']}\n'
                                 f'<b>–û–ø–∏—Å–∞–Ω–∏–µ</b>:\n{tdata['description']}',
                                 reply_markup=kb.sure)
    except Exception:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


@client.message(F.text == 'üåü –î–∞', st.AddOrder.sure)
async def ok_add_order(message: Message, bot: Bot, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        # –±–µ—Ä—ë–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
        tdata = await state.get_data()
        # –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –≤ –ë–î
        order = await db.add_order(message.from_user.id ,tdata['title'], tdata['description'])
        await bot.send_message(chat_id=ADMIN_ORDER_CHAT_ID, text=f'‚ÄºÔ∏è –í–ù–ò–ú–ê–ù–ò–ï ‚ÄºÔ∏è\n\n'
                                                           f'<b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑:</b>\n'
                                                           f'<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {tdata['title']}\n'
                                                           f'<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{tdata['description']}\n',
                               reply_markup=await kb.order_moderation(order.id))
        # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(st.ClientOrder.list)
        orders = await db.client_orders(message.from_user.id)
        await message.answer('‚ÄºÔ∏è –í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é')
        if not orders:
            await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞',
                                 reply_markup=kb.create_and_back)
        else:
            await message.answer('–í–∞—à–∏ –∑–∞–∫–∞–∑—ã',
                                 reply_markup=await kb.client_orders(orders))
            await message.answer('–ú–µ–Ω—é üëá',
                                 reply_markup=kb.create_and_back)
    except Exception:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


"""--------------------------------–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞---------------------------------------------"""

@client.message(F.text == '‚úçÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑', st.ClientOrder.order)
async def client_order_edit_title(message: Message, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(st.EditOrder.title)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ (–¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤)',
                             reply_markup=kb.cancel)
    except Exception:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


@client.message(F.text == '‚ùå –û—Ç–º–µ–Ω–∞', st.DeleteOrder.sure)
@client.message(F.text == '‚ùå –û—Ç–º–µ–Ω–∞', st.EditOrder.sure)
@client.message(F.text == '‚ùå –û—Ç–º–µ–Ω–∞', st.EditOrder.description)
@client.message(F.text == '‚ùå –û—Ç–º–µ–Ω–∞', st.EditOrder.title)
async def  cancel_client_order_edit(message: Message, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(st.ClientOrder.order)
        tdata = await state.get_data()
        # –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ callback id –∑–∞–ø—Ä–æ—Å–∞
        order_info = await db.get_order(tdata['order'])
        await message.answer('–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞ üîπ')
        await message.answer(f'<b>–ù–∞–∑–≤–∞–Ω–∏–µ</b>: {order_info.title}\n'
                                      f'<b>–û–ø–∏—Å–∞–Ω–∏–µ</b>:\n{order_info.description}',
                                      reply_markup=kb.client_order_menu)
    except Exception:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


@client.message(st.EditOrder.title)
async def client_order_edit_description(message: Message, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        if len(message.text) > 50:
            await message.answer('–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª–µ–µ 50 —Å–∏–º–≤–æ–ª–æ–≤',
                                 reply_markup=kb.cancel)
        else:
            # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –Ω—É–∂–Ω–æ–µ –Ω–∞–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–µ–¥—ë–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            await state.update_data(title=message.text)
            # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.set_state(st.EditOrder.description)
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞',
                                 reply_markup=kb.cancel)
    except Exception:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


@client.message(st.EditOrder.description)
async def sure_client_order_edit(message: Message, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        if len(message.text) > 10000:
            await message.answer('–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª–µ–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤',
                                 reply_markup=kb.cancel)
        else:
            # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –Ω—É–∂–Ω–æ–µ –Ω–∞–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–µ–¥—ë–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            await state.update_data(description=message.text)
            # –±–µ—Ä—ë–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
            tdata = await state.get_data()
            # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.set_state(st.EditOrder.sure)
            await message.answer(f'–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ?\n\n'
                                 f'<b>–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ</b>: {tdata['title']}\n'
                                 f'<b>–ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ</b>:\n{tdata['description']}',
                                 reply_markup=kb.sure)
    except Exception:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


@client.message(F.text == 'üåü –î–∞', st.EditOrder.sure)
async def ok_edit_order(message: Message, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        # –±–µ—Ä—ë–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
        tdata = await state.get_data()
        # –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –≤ –ë–î
        await db.edit_order(tdata['order'] ,tdata['title'], tdata['description'])
        # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(st.ClientOrder.order)
        tdata = await state.get_data()
        # –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ callback id –∑–∞–ø—Ä–æ—Å–∞
        order_info = await db.get_order(tdata['order'])
        await message.answer('–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞ üîπ')
        await message.answer(f'<b>–ù–∞–∑–≤–∞–Ω–∏–µ</b>: {order_info.title}\n'
                             f'<b>–û–ø–∏—Å–∞–Ω–∏–µ</b>:\n{order_info.description}',
                             reply_markup=kb.client_order_menu)
    except Exception:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


"""--------------------------------–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞---------------------------------------------"""
@client.message(F.text == '‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑', st.ClientOrder.order)
async def client_order_delete(message: Message, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(st.DeleteOrder.sure)
        await message.answer('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑?',
                             reply_markup=kb.sure)
    except Exception:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


@client.message(F.text == 'üåü –î–∞', st.DeleteOrder.sure)
async def ok_delete_order(message: Message, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        # –±–µ—Ä—ë–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
        tdata = await state.get_data()
        # –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –≤ –ë–î
        await db.delete_order(tdata['order'])
        # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(st.ClientOrder.list)
        orders = await db.client_orders(message.from_user.id)
        if not orders:
            await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞',
                                 reply_markup=kb.create_and_back)
        else:
            await message.answer('–í–∞—à–∏ –∑–∞–∫–∞–∑—ã',
                                 reply_markup=await kb.client_orders(orders))
            await message.answer('–ú–µ–Ω—é üëá',
                                 reply_markup=kb.back)
    except Exception:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


"""

–î–µ–π—Å—Ç–≤–∏—è –≤ —Ä–∞–∑–¥–µ–ª–µ "–û—Ç–∫–ª–∏–∫–∏"
----------------------------------------------------------------------------------------------
"""
@client.message(F.text == '‚óÄÔ∏è –ù–∞–∑–∞–¥', st.ClientResponse.order_responses)
@client.message(F.text == 'üí• –û—Ç–∫–ª–∏–∫–∏', st.ClientMenu.menu)
async def client_response_list(message: Message, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(st.ClientResponse.list)
        orders = await db.client_orders(message.from_user.id)
        if not orders:
            await message.answer('–ù—É–∂–µ–Ω —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑',
                                 reply_markup=kb.create_and_back)
        else:
            for order in orders:
                total_response = await db.total_response(order.id)
                await message.answer(f'<b>–ó–∞–∫–∞–∑:</b> {order.title}',
                                     reply_markup= await kb.order_total_response(order.id, total_response))
            await message.answer('–ú–µ–Ω—é üëá',
                                 reply_markup=kb.back)
    except Exception:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


@client.callback_query(F.data == 'no_responses', st.ClientResponse.list)
async def no_responses(callback: Message, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        # –æ—Ç–≤–µ—Ç –Ω–∞ callback
        await callback.answer('–ù–µ—Ç –æ—Ç–∫–ª–∏–∫–æ–≤')
    except Exception:
        await callback.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                                      '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @kosdem04')


@client.callback_query(F.data.startswith('total-order-responses_'), st.ClientResponse.list)
async def client_response_info(callback: Message, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        # –æ—Ç–≤–µ—Ç –Ω–∞ callback
        await callback.answer('')
        # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(st.ClientResponse.order_responses)
        # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –Ω—É–∂–Ω–æ–µ –Ω–∞–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–µ–¥—ë–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        #await state.update_data(order=callback.data.split('_')[1])
        responses = await db.client_responses(callback.data.split('_')[1])
        for response in responses:
            developer = await db.get_developer(response.developer)
            await callback.message.answer(f'<b>–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫</b>: @{developer.username}\n'
                                          f'<b>–û—Ç–∫–ª–∏–∫</b>:\n{response.description}',
                                          reply_markup=await kb.client_response_menu(developer.username, response.id))
    except Exception:
        await callback.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                                      '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @kosdem04')


@client.callback_query(F.data.startswith('refusal-response_'), st.ClientResponse.order_responses)
async def refusal_response(callback: Message, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        # –æ—Ç–≤–µ—Ç –Ω–∞ callback
        await callback.answer('')
        await callback.message.delete()
        await db.refuse_response(callback.data.split('_')[1])
    except Exception:
        await callback.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                                      '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @kosdem04')


@client.callback_query(F.data.startswith('choose-response_'), st.ClientResponse.order_responses)
async def choose_response(callback: Message, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        # –æ—Ç–≤–µ—Ç –Ω–∞ callback
        await callback.answer('')
        # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(st.ClientResponse.sure_complete_order)
        await state.update_data(sure_complete_order=callback.data.split('_')[1])
        response = await db.get_response(callback.data.split('_')[1])
        developer = await db.get_developer(response.developer)
        await callback.message.answer(f'‚ÄºÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –∑–∞–∫–∞–∑ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ @{developer.username}',
                                      reply_markup=kb.sure)
    except Exception:
        await callback.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                                      '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @kosdem04')


@client.message(F.text == '‚ùå –û—Ç–º–µ–Ω–∞', st.ClientResponse.sure_complete_order)
async def cancel_choose_response(message: Message, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(st.ClientResponse.order_responses)
        await callbackmessage.answer('–ú–µ–Ω—é üëá',
                             reply_markup=kb.back)
    except Exception:
        await callback.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                                      '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @kosdem04')


"""

–î–µ–π—Å—Ç–≤–∏—è –≤ —Ä–∞–∑–¥–µ–ª–µ "FAQ"
----------------------------------------------------------------------------------------------
"""


@client.message(F.text == 'üíé FAQ', st.ClientMenu.menu)
async def client_faq(message: Message, state: FSMContext):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(st.FAQ.client)
        await message.answer('–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã',
                                 reply_markup=kb.back)
    except Exception:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


"""

–ß—Ç–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∑–∞–∫—Ä—ã—Ç–æ–≥–æ —á–∞—Ç–∞ (–º–æ–¥–µ—Ä–∞—Ü–∏—è)
----------------------------------------------------------------------------------------------

"""


@client.callback_query(lambda callback: callback.message.chat.id == ADMIN_ORDER_CHAT_ID, F.data.startswith('moderation-passed_'))  # —Ö—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–æ–≥–¥–∞, –∫–æ–≥–¥–∞ –≤ –Ω—É–∂–Ω—ã–π —á–∞—Ç –ø—Ä–∏—Å—ã–ª–∞–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ
async def moderation_passed(callback: Message, bot: Bot):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        # –æ—Ç–≤–µ—Ç –Ω–∞ callback
        await callback.answer('–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–∞–±–æ—Ç—É')
        await callback.message.delete()
        # –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ callback id –∑–∞–ø—Ä–æ—Å–∞
        order = await db.available_order(callback.data.split('_')[1])
        await bot.send_message(chat_id=order.client, text='<b>‚ÄºÔ∏è –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–æ—à—ë–ª –º–æ–¥–µ—Ä–∞—Ü–∏—é</b>')
    except Exception:
        await callback.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')


@client.callback_query(lambda callback: callback.message.chat.id == ADMIN_ORDER_CHAT_ID, F.data.startswith('moderation-failed_'))  # —Ö—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–æ–≥–¥–∞, –∫–æ–≥–¥–∞ –≤ –Ω—É–∂–Ω—ã–π —á–∞—Ç –ø—Ä–∏—Å—ã–ª–∞–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ
async def moderation_failed(callback: Message, bot: Bot):
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –ª–æ–≤–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
    # –∞ —Ç–∞–∫–∂–µ –Ω–µ –¥–∞—ë—Ç –∏–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        # –æ—Ç–≤–µ—Ç –Ω–∞ callback
        await callback.answer('–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–∞–±–æ—Ç—É')
        await callback.message.delete()
        # –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ callback id –∑–∞–ø—Ä–æ—Å–∞
        order = await db.delete_order(callback.data.split('_')[1])
        await bot.send_message(chat_id=order.client, text='<b>‚ÄºÔ∏è –í–∞—à –∑–∞–∫–∞–∑ –Ω–µ –ø—Ä–æ—à—ë–ª –º–æ–¥–µ—Ä–∞—Ü–∏—é</b>')
    except Exception:
        await callback.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                             '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @mesudoteach')